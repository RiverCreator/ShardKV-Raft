// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapShotInfo_ClientseqEntry_DoNotUse_raft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapShotInfo_DataEntry_DoNotUse_raft_2eproto;
namespace rf {
class AppendEntriesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntriesRequest> _instance;
} _AppendEntriesRequest_default_instance_;
class AppendEntriesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntriesResponse> _instance;
} _AppendEntriesResponse_default_instance_;
class RequestVoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVote> _instance;
} _RequestVote_default_instance_;
class ResponseVoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseVote> _instance;
} _ResponseVote_default_instance_;
class InstallSnapShotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstallSnapShotRequest> _instance;
} _InstallSnapShotRequest_default_instance_;
class SnapShotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapShot> _instance;
} _SnapShot_default_instance_;
class SnapShotInfo_DataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapShotInfo_DataEntry_DoNotUse> _instance;
} _SnapShotInfo_DataEntry_DoNotUse_default_instance_;
class SnapShotInfo_ClientseqEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapShotInfo_ClientseqEntry_DoNotUse> _instance;
} _SnapShotInfo_ClientseqEntry_DoNotUse_default_instance_;
class SnapShotInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapShotInfo> _instance;
} _SnapShotInfo_default_instance_;
class InstallSnapShotResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstallSnapShotResponse> _instance;
} _InstallSnapShotResponse_default_instance_;
}  // namespace rf
static void InitDefaultsscc_info_AppendEntriesRequest_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rf::_AppendEntriesRequest_default_instance_;
    new (ptr) ::rf::AppendEntriesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendEntriesRequest_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppendEntriesRequest_raft_2eproto}, {}};

static void InitDefaultsscc_info_AppendEntriesResponse_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rf::_AppendEntriesResponse_default_instance_;
    new (ptr) ::rf::AppendEntriesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendEntriesResponse_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppendEntriesResponse_raft_2eproto}, {}};

static void InitDefaultsscc_info_InstallSnapShotRequest_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rf::_InstallSnapShotRequest_default_instance_;
    new (ptr) ::rf::InstallSnapShotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstallSnapShotRequest_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstallSnapShotRequest_raft_2eproto}, {}};

static void InitDefaultsscc_info_InstallSnapShotResponse_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rf::_InstallSnapShotResponse_default_instance_;
    new (ptr) ::rf::InstallSnapShotResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstallSnapShotResponse_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstallSnapShotResponse_raft_2eproto}, {}};

static void InitDefaultsscc_info_RequestVote_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rf::_RequestVote_default_instance_;
    new (ptr) ::rf::RequestVote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVote_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVote_raft_2eproto}, {}};

static void InitDefaultsscc_info_ResponseVote_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rf::_ResponseVote_default_instance_;
    new (ptr) ::rf::ResponseVote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseVote_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResponseVote_raft_2eproto}, {}};

static void InitDefaultsscc_info_SnapShot_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rf::_SnapShot_default_instance_;
    new (ptr) ::rf::SnapShot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapShot_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SnapShot_raft_2eproto}, {}};

static void InitDefaultsscc_info_SnapShotInfo_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rf::_SnapShotInfo_default_instance_;
    new (ptr) ::rf::SnapShotInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SnapShotInfo_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SnapShotInfo_raft_2eproto}, {
      &scc_info_SnapShotInfo_DataEntry_DoNotUse_raft_2eproto.base,
      &scc_info_SnapShotInfo_ClientseqEntry_DoNotUse_raft_2eproto.base,}};

static void InitDefaultsscc_info_SnapShotInfo_ClientseqEntry_DoNotUse_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rf::_SnapShotInfo_ClientseqEntry_DoNotUse_default_instance_;
    new (ptr) ::rf::SnapShotInfo_ClientseqEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapShotInfo_ClientseqEntry_DoNotUse_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SnapShotInfo_ClientseqEntry_DoNotUse_raft_2eproto}, {}};

static void InitDefaultsscc_info_SnapShotInfo_DataEntry_DoNotUse_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rf::_SnapShotInfo_DataEntry_DoNotUse_default_instance_;
    new (ptr) ::rf::SnapShotInfo_DataEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapShotInfo_DataEntry_DoNotUse_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SnapShotInfo_DataEntry_DoNotUse_raft_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_raft_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_raft_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_raft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_raft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesRequest, m_term_),
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesRequest, m_leaderid_),
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesRequest, m_prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesRequest, m_prevlogterm_),
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesRequest, m_leadercommit_),
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesRequest, m_sendlogs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesResponse, m_term_),
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesResponse, m_success_),
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesResponse, m_conflict_term_),
  PROTOBUF_FIELD_OFFSET(::rf::AppendEntriesResponse, m_conflict_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rf::RequestVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rf::RequestVote, term_),
  PROTOBUF_FIELD_OFFSET(::rf::RequestVote, candidateid_),
  PROTOBUF_FIELD_OFFSET(::rf::RequestVote, lastlogindex_),
  PROTOBUF_FIELD_OFFSET(::rf::RequestVote, lastlogterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rf::ResponseVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rf::ResponseVote, term_),
  PROTOBUF_FIELD_OFFSET(::rf::ResponseVote, isaccepted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rf::InstallSnapShotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rf::InstallSnapShotRequest, term_),
  PROTOBUF_FIELD_OFFSET(::rf::InstallSnapShotRequest, leaderid_),
  PROTOBUF_FIELD_OFFSET(::rf::InstallSnapShotRequest, lastincludeindex_),
  PROTOBUF_FIELD_OFFSET(::rf::InstallSnapShotRequest, lastincludeterm_),
  PROTOBUF_FIELD_OFFSET(::rf::InstallSnapShotRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::rf::InstallSnapShotRequest, data_),
  PROTOBUF_FIELD_OFFSET(::rf::InstallSnapShotRequest, done_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rf::SnapShot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rf::SnapShot, lastincludeindex_),
  PROTOBUF_FIELD_OFFSET(::rf::SnapShot, lastincludeterm_),
  PROTOBUF_FIELD_OFFSET(::rf::SnapShot, data_),
  PROTOBUF_FIELD_OFFSET(::rf::SnapShotInfo_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rf::SnapShotInfo_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rf::SnapShotInfo_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::rf::SnapShotInfo_DataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rf::SnapShotInfo_ClientseqEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rf::SnapShotInfo_ClientseqEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rf::SnapShotInfo_ClientseqEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::rf::SnapShotInfo_ClientseqEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rf::SnapShotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rf::SnapShotInfo, data_),
  PROTOBUF_FIELD_OFFSET(::rf::SnapShotInfo, clientseq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rf::InstallSnapShotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rf::InstallSnapShotResponse, term_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rf::AppendEntriesRequest)},
  { 11, -1, sizeof(::rf::AppendEntriesResponse)},
  { 20, -1, sizeof(::rf::RequestVote)},
  { 29, -1, sizeof(::rf::ResponseVote)},
  { 36, -1, sizeof(::rf::InstallSnapShotRequest)},
  { 48, -1, sizeof(::rf::SnapShot)},
  { 56, 63, sizeof(::rf::SnapShotInfo_DataEntry_DoNotUse)},
  { 65, 72, sizeof(::rf::SnapShotInfo_ClientseqEntry_DoNotUse)},
  { 74, -1, sizeof(::rf::SnapShotInfo)},
  { 81, -1, sizeof(::rf::InstallSnapShotResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rf::_AppendEntriesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rf::_AppendEntriesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rf::_RequestVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rf::_ResponseVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rf::_InstallSnapShotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rf::_SnapShot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rf::_SnapShotInfo_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rf::_SnapShotInfo_ClientseqEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rf::_SnapShotInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rf::_InstallSnapShotResponse_default_instance_),
};

const char descriptor_table_protodef_raft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nraft.proto\022\002rf\"\225\001\n\024AppendEntriesReques"
  "t\022\016\n\006m_term\030\001 \001(\005\022\022\n\nm_leaderId\030\002 \001(\005\022\026\n"
  "\016m_prevLogIndex\030\003 \001(\005\022\025\n\rm_prevLogTerm\030\004"
  " \001(\005\022\026\n\016m_leaderCommit\030\005 \001(\005\022\022\n\nm_sendLo"
  "gs\030\006 \001(\014\"m\n\025AppendEntriesResponse\022\016\n\006m_t"
  "erm\030\001 \001(\005\022\021\n\tm_success\030\002 \001(\010\022\027\n\017m_confli"
  "ct_term\030\003 \001(\005\022\030\n\020m_conflict_index\030\004 \001(\005\""
  "[\n\013RequestVote\022\014\n\004term\030\001 \001(\005\022\023\n\013candidat"
  "eId\030\002 \001(\005\022\024\n\014lastLogIndex\030\003 \001(\005\022\023\n\013lastL"
  "ogTerm\030\004 \001(\005\"0\n\014ResponseVote\022\014\n\004term\030\001 \001"
  "(\005\022\022\n\nisAccepted\030\002 \001(\010\"\227\001\n\026InstallSnapSh"
  "otRequest\022\014\n\004term\030\001 \001(\005\022\020\n\010leaderId\030\002 \001("
  "\005\022\030\n\020lastIncludeIndex\030\003 \001(\005\022\027\n\017lastInclu"
  "deTerm\030\004 \001(\005\022\016\n\006offset\030\005 \001(\005\022\014\n\004data\030\006 \003"
  "(\t\022\014\n\004done\030\007 \001(\010\"K\n\010SnapShot\022\030\n\020lastIncl"
  "udeIndex\030\001 \001(\005\022\027\n\017lastIncludeTerm\030\002 \001(\005\022"
  "\014\n\004data\030\003 \001(\014\"\313\001\n\014SnapShotInfo\022(\n\004data\030\001"
  " \003(\0132\032.rf.SnapShotInfo.DataEntry\0222\n\tclie"
  "ntseq\030\002 \003(\0132\037.rf.SnapShotInfo.ClientseqE"
  "ntry\032+\n\tDataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\0320\n\016ClientseqEntry\022\013\n\003key\030\001 \001(\005"
  "\022\r\n\005value\030\002 \001(\005:\0028\001\"\'\n\027InstallSnapShotRe"
  "sponse\022\014\n\004term\030\001 \001(\0052\314\001\n\rRaftServerRpc\022D"
  "\n\rAppendEntries\022\030.rf.AppendEntriesReques"
  "t\032\031.rf.AppendEntriesResponse\022)\n\004Vote\022\017.r"
  "f.RequestVote\032\020.rf.ResponseVote\022J\n\017Insta"
  "llSnapShot\022\032.rf.InstallSnapShotRequest\032\033"
  ".rf.InstallSnapShotResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_raft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_raft_2eproto_sccs[10] = {
  &scc_info_AppendEntriesRequest_raft_2eproto.base,
  &scc_info_AppendEntriesResponse_raft_2eproto.base,
  &scc_info_InstallSnapShotRequest_raft_2eproto.base,
  &scc_info_InstallSnapShotResponse_raft_2eproto.base,
  &scc_info_RequestVote_raft_2eproto.base,
  &scc_info_ResponseVote_raft_2eproto.base,
  &scc_info_SnapShot_raft_2eproto.base,
  &scc_info_SnapShotInfo_raft_2eproto.base,
  &scc_info_SnapShotInfo_ClientseqEntry_DoNotUse_raft_2eproto.base,
  &scc_info_SnapShotInfo_DataEntry_DoNotUse_raft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_raft_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto = {
  false, false, descriptor_table_protodef_raft_2eproto, "raft.proto", 1115,
  &descriptor_table_raft_2eproto_once, descriptor_table_raft_2eproto_sccs, descriptor_table_raft_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_raft_2eproto::offsets,
  file_level_metadata_raft_2eproto, 10, file_level_enum_descriptors_raft_2eproto, file_level_service_descriptors_raft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_raft_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_raft_2eproto)), true);
namespace rf {

// ===================================================================

class AppendEntriesRequest::_Internal {
 public:
};

AppendEntriesRequest::AppendEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rf.AppendEntriesRequest)
}
AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_sendlogs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_m_sendlogs().empty()) {
    m_sendlogs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_m_sendlogs(), 
      GetArena());
  }
  ::memcpy(&m_term_, &from.m_term_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_leadercommit_) -
    reinterpret_cast<char*>(&m_term_)) + sizeof(m_leadercommit_));
  // @@protoc_insertion_point(copy_constructor:rf.AppendEntriesRequest)
}

void AppendEntriesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendEntriesRequest_raft_2eproto.base);
  m_sendlogs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&m_term_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&m_leadercommit_) -
      reinterpret_cast<char*>(&m_term_)) + sizeof(m_leadercommit_));
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:rf.AppendEntriesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendEntriesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_sendlogs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppendEntriesRequest::ArenaDtor(void* object) {
  AppendEntriesRequest* _this = reinterpret_cast< AppendEntriesRequest* >(object);
  (void)_this;
}
void AppendEntriesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesRequest& AppendEntriesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntriesRequest_raft_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rf.AppendEntriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_sendlogs_.ClearToEmpty();
  ::memset(&m_term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_leadercommit_) -
      reinterpret_cast<char*>(&m_term_)) + sizeof(m_leadercommit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_leaderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_prevLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_prevlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_prevLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          m_prevlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_leaderCommit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          m_leadercommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes m_sendLogs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_m_sendlogs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf.AppendEntriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_term = 1;
  if (this->m_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_term(), target);
  }

  // int32 m_leaderId = 2;
  if (this->m_leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_leaderid(), target);
  }

  // int32 m_prevLogIndex = 3;
  if (this->m_prevlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_prevlogindex(), target);
  }

  // int32 m_prevLogTerm = 4;
  if (this->m_prevlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_prevlogterm(), target);
  }

  // int32 m_leaderCommit = 5;
  if (this->m_leadercommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_leadercommit(), target);
  }

  // bytes m_sendLogs = 6;
  if (this->m_sendlogs().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_m_sendlogs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rf.AppendEntriesRequest)
  return target;
}

size_t AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rf.AppendEntriesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_sendLogs = 6;
  if (this->m_sendlogs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_sendlogs());
  }

  // int32 m_term = 1;
  if (this->m_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_term());
  }

  // int32 m_leaderId = 2;
  if (this->m_leaderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_leaderid());
  }

  // int32 m_prevLogIndex = 3;
  if (this->m_prevlogindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_prevlogindex());
  }

  // int32 m_prevLogTerm = 4;
  if (this->m_prevlogterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_prevlogterm());
  }

  // int32 m_leaderCommit = 5;
  if (this->m_leadercommit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_leadercommit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rf.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntriesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rf.AppendEntriesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rf.AppendEntriesRequest)
    MergeFrom(*source);
  }
}

void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rf.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.m_sendlogs().size() > 0) {
    _internal_set_m_sendlogs(from._internal_m_sendlogs());
  }
  if (from.m_term() != 0) {
    _internal_set_m_term(from._internal_m_term());
  }
  if (from.m_leaderid() != 0) {
    _internal_set_m_leaderid(from._internal_m_leaderid());
  }
  if (from.m_prevlogindex() != 0) {
    _internal_set_m_prevlogindex(from._internal_m_prevlogindex());
  }
  if (from.m_prevlogterm() != 0) {
    _internal_set_m_prevlogterm(from._internal_m_prevlogterm());
  }
  if (from.m_leadercommit() != 0) {
    _internal_set_m_leadercommit(from._internal_m_leadercommit());
  }
}

void AppendEntriesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rf.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rf.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  return true;
}

void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  m_sendlogs_.Swap(&other->m_sendlogs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, m_leadercommit_)
      + sizeof(AppendEntriesRequest::m_leadercommit_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, m_term_)>(
          reinterpret_cast<char*>(&m_term_),
          reinterpret_cast<char*>(&other->m_term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppendEntriesResponse::_Internal {
 public:
};

AppendEntriesResponse::AppendEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rf.AppendEntriesResponse)
}
AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_term_, &from.m_term_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_conflict_index_) -
    reinterpret_cast<char*>(&m_term_)) + sizeof(m_conflict_index_));
  // @@protoc_insertion_point(copy_constructor:rf.AppendEntriesResponse)
}

void AppendEntriesResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&m_term_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&m_conflict_index_) -
      reinterpret_cast<char*>(&m_term_)) + sizeof(m_conflict_index_));
}

AppendEntriesResponse::~AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:rf.AppendEntriesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendEntriesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppendEntriesResponse::ArenaDtor(void* object) {
  AppendEntriesResponse* _this = reinterpret_cast< AppendEntriesResponse* >(object);
  (void)_this;
}
void AppendEntriesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesResponse& AppendEntriesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntriesResponse_raft_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rf.AppendEntriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m_term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_conflict_index_) -
      reinterpret_cast<char*>(&m_term_)) + sizeof(m_conflict_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_conflict_term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_conflict_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_conflict_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          m_conflict_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf.AppendEntriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_term = 1;
  if (this->m_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_term(), target);
  }

  // bool m_success = 2;
  if (this->m_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_m_success(), target);
  }

  // int32 m_conflict_term = 3;
  if (this->m_conflict_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_conflict_term(), target);
  }

  // int32 m_conflict_index = 4;
  if (this->m_conflict_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_conflict_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rf.AppendEntriesResponse)
  return target;
}

size_t AppendEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rf.AppendEntriesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_term = 1;
  if (this->m_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_term());
  }

  // bool m_success = 2;
  if (this->m_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 m_conflict_term = 3;
  if (this->m_conflict_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_conflict_term());
  }

  // int32 m_conflict_index = 4;
  if (this->m_conflict_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_conflict_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rf.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntriesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rf.AppendEntriesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rf.AppendEntriesResponse)
    MergeFrom(*source);
  }
}

void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rf.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.m_term() != 0) {
    _internal_set_m_term(from._internal_m_term());
  }
  if (from.m_success() != 0) {
    _internal_set_m_success(from._internal_m_success());
  }
  if (from.m_conflict_term() != 0) {
    _internal_set_m_conflict_term(from._internal_m_conflict_term());
  }
  if (from.m_conflict_index() != 0) {
    _internal_set_m_conflict_index(from._internal_m_conflict_index());
  }
}

void AppendEntriesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rf.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rf.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponse::IsInitialized() const {
  return true;
}

void AppendEntriesResponse::InternalSwap(AppendEntriesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, m_conflict_index_)
      + sizeof(AppendEntriesResponse::m_conflict_index_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, m_term_)>(
          reinterpret_cast<char*>(&m_term_),
          reinterpret_cast<char*>(&other->m_term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestVote::_Internal {
 public:
};

RequestVote::RequestVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rf.RequestVote)
}
RequestVote::RequestVote(const RequestVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:rf.RequestVote)
}

void RequestVote::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
}

RequestVote::~RequestVote() {
  // @@protoc_insertion_point(destructor:rf.RequestVote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestVote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestVote::ArenaDtor(void* object) {
  RequestVote* _this = reinterpret_cast< RequestVote* >(object);
  (void)_this;
}
void RequestVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVote& RequestVote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVote_raft_2eproto.base);
  return *internal_default_instance();
}


void RequestVote::Clear() {
// @@protoc_insertion_point(message_clear_start:rf.RequestVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 candidateId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          candidateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lastlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lastlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf.RequestVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 candidateId = 2;
  if (this->candidateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_candidateid(), target);
  }

  // int32 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lastlogindex(), target);
  }

  // int32 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lastlogterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rf.RequestVote)
  return target;
}

size_t RequestVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rf.RequestVote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  // int32 candidateId = 2;
  if (this->candidateid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_candidateid());
  }

  // int32 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastlogindex());
  }

  // int32 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastlogterm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rf.RequestVote)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rf.RequestVote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rf.RequestVote)
    MergeFrom(*source);
  }
}

void RequestVote::MergeFrom(const RequestVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rf.RequestVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.candidateid() != 0) {
    _internal_set_candidateid(from._internal_candidateid());
  }
  if (from.lastlogindex() != 0) {
    _internal_set_lastlogindex(from._internal_lastlogindex());
  }
  if (from.lastlogterm() != 0) {
    _internal_set_lastlogterm(from._internal_lastlogterm());
  }
}

void RequestVote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rf.RequestVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVote::CopyFrom(const RequestVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rf.RequestVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVote::IsInitialized() const {
  return true;
}

void RequestVote::InternalSwap(RequestVote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVote, lastlogterm_)
      + sizeof(RequestVote::lastlogterm_)
      - PROTOBUF_FIELD_OFFSET(RequestVote, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResponseVote::_Internal {
 public:
};

ResponseVote::ResponseVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rf.ResponseVote)
}
ResponseVote::ResponseVote(const ResponseVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&isaccepted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(isaccepted_));
  // @@protoc_insertion_point(copy_constructor:rf.ResponseVote)
}

void ResponseVote::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isaccepted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(isaccepted_));
}

ResponseVote::~ResponseVote() {
  // @@protoc_insertion_point(destructor:rf.ResponseVote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseVote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResponseVote::ArenaDtor(void* object) {
  ResponseVote* _this = reinterpret_cast< ResponseVote* >(object);
  (void)_this;
}
void ResponseVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseVote& ResponseVote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseVote_raft_2eproto.base);
  return *internal_default_instance();
}


void ResponseVote::Clear() {
// @@protoc_insertion_point(message_clear_start:rf.ResponseVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isaccepted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(isaccepted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isAccepted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isaccepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseVote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf.ResponseVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // bool isAccepted = 2;
  if (this->isaccepted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isaccepted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rf.ResponseVote)
  return target;
}

size_t ResponseVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rf.ResponseVote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  // bool isAccepted = 2;
  if (this->isaccepted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseVote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rf.ResponseVote)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseVote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rf.ResponseVote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rf.ResponseVote)
    MergeFrom(*source);
  }
}

void ResponseVote::MergeFrom(const ResponseVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rf.ResponseVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.isaccepted() != 0) {
    _internal_set_isaccepted(from._internal_isaccepted());
  }
}

void ResponseVote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rf.ResponseVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseVote::CopyFrom(const ResponseVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rf.ResponseVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseVote::IsInitialized() const {
  return true;
}

void ResponseVote::InternalSwap(ResponseVote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseVote, isaccepted_)
      + sizeof(ResponseVote::isaccepted_)
      - PROTOBUF_FIELD_OFFSET(ResponseVote, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseVote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InstallSnapShotRequest::_Internal {
 public:
};

InstallSnapShotRequest::InstallSnapShotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rf.InstallSnapShotRequest)
}
InstallSnapShotRequest::InstallSnapShotRequest(const InstallSnapShotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&done_) -
    reinterpret_cast<char*>(&term_)) + sizeof(done_));
  // @@protoc_insertion_point(copy_constructor:rf.InstallSnapShotRequest)
}

void InstallSnapShotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstallSnapShotRequest_raft_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&done_) -
      reinterpret_cast<char*>(&term_)) + sizeof(done_));
}

InstallSnapShotRequest::~InstallSnapShotRequest() {
  // @@protoc_insertion_point(destructor:rf.InstallSnapShotRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstallSnapShotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InstallSnapShotRequest::ArenaDtor(void* object) {
  InstallSnapShotRequest* _this = reinterpret_cast< InstallSnapShotRequest* >(object);
  (void)_this;
}
void InstallSnapShotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstallSnapShotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstallSnapShotRequest& InstallSnapShotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstallSnapShotRequest_raft_2eproto.base);
  return *internal_default_instance();
}


void InstallSnapShotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rf.InstallSnapShotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&done_) -
      reinterpret_cast<char*>(&term_)) + sizeof(done_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallSnapShotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 leaderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastIncludeIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lastincludeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastIncludeTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lastincludeterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rf.InstallSnapShotRequest.data"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool done = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstallSnapShotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf.InstallSnapShotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 leaderId = 2;
  if (this->leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderid(), target);
  }

  // int32 lastIncludeIndex = 3;
  if (this->lastincludeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lastincludeindex(), target);
  }

  // int32 lastIncludeTerm = 4;
  if (this->lastincludeterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lastincludeterm(), target);
  }

  // int32 offset = 5;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_offset(), target);
  }

  // repeated string data = 6;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rf.InstallSnapShotRequest.data");
    target = stream->WriteString(6, s, target);
  }

  // bool done = 7;
  if (this->done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_done(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rf.InstallSnapShotRequest)
  return target;
}

size_t InstallSnapShotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rf.InstallSnapShotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      data_.Get(i));
  }

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  // int32 leaderId = 2;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leaderid());
  }

  // int32 lastIncludeIndex = 3;
  if (this->lastincludeindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastincludeindex());
  }

  // int32 lastIncludeTerm = 4;
  if (this->lastincludeterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastincludeterm());
  }

  // int32 offset = 5;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // bool done = 7;
  if (this->done() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstallSnapShotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rf.InstallSnapShotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallSnapShotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstallSnapShotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rf.InstallSnapShotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rf.InstallSnapShotRequest)
    MergeFrom(*source);
  }
}

void InstallSnapShotRequest::MergeFrom(const InstallSnapShotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rf.InstallSnapShotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.leaderid() != 0) {
    _internal_set_leaderid(from._internal_leaderid());
  }
  if (from.lastincludeindex() != 0) {
    _internal_set_lastincludeindex(from._internal_lastincludeindex());
  }
  if (from.lastincludeterm() != 0) {
    _internal_set_lastincludeterm(from._internal_lastincludeterm());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.done() != 0) {
    _internal_set_done(from._internal_done());
  }
}

void InstallSnapShotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rf.InstallSnapShotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapShotRequest::CopyFrom(const InstallSnapShotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rf.InstallSnapShotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapShotRequest::IsInitialized() const {
  return true;
}

void InstallSnapShotRequest::InternalSwap(InstallSnapShotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstallSnapShotRequest, done_)
      + sizeof(InstallSnapShotRequest::done_)
      - PROTOBUF_FIELD_OFFSET(InstallSnapShotRequest, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallSnapShotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SnapShot::_Internal {
 public:
};

SnapShot::SnapShot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rf.SnapShot)
}
SnapShot::SnapShot(const SnapShot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&lastincludeindex_, &from.lastincludeindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastincludeterm_) -
    reinterpret_cast<char*>(&lastincludeindex_)) + sizeof(lastincludeterm_));
  // @@protoc_insertion_point(copy_constructor:rf.SnapShot)
}

void SnapShot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapShot_raft_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lastincludeindex_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lastincludeterm_) -
      reinterpret_cast<char*>(&lastincludeindex_)) + sizeof(lastincludeterm_));
}

SnapShot::~SnapShot() {
  // @@protoc_insertion_point(destructor:rf.SnapShot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SnapShot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnapShot::ArenaDtor(void* object) {
  SnapShot* _this = reinterpret_cast< SnapShot* >(object);
  (void)_this;
}
void SnapShot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnapShot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapShot& SnapShot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapShot_raft_2eproto.base);
  return *internal_default_instance();
}


void SnapShot::Clear() {
// @@protoc_insertion_point(message_clear_start:rf.SnapShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&lastincludeindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastincludeterm_) -
      reinterpret_cast<char*>(&lastincludeindex_)) + sizeof(lastincludeterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapShot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lastIncludeIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lastincludeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastIncludeTerm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lastincludeterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapShot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf.SnapShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lastIncludeIndex = 1;
  if (this->lastincludeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lastincludeindex(), target);
  }

  // int32 lastIncludeTerm = 2;
  if (this->lastincludeterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lastincludeterm(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rf.SnapShot)
  return target;
}

size_t SnapShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rf.SnapShot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 lastIncludeIndex = 1;
  if (this->lastincludeindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastincludeindex());
  }

  // int32 lastIncludeTerm = 2;
  if (this->lastincludeterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastincludeterm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapShot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rf.SnapShot)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapShot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapShot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rf.SnapShot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rf.SnapShot)
    MergeFrom(*source);
  }
}

void SnapShot::MergeFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rf.SnapShot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.lastincludeindex() != 0) {
    _internal_set_lastincludeindex(from._internal_lastincludeindex());
  }
  if (from.lastincludeterm() != 0) {
    _internal_set_lastincludeterm(from._internal_lastincludeterm());
  }
}

void SnapShot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rf.SnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapShot::CopyFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rf.SnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapShot::IsInitialized() const {
  return true;
}

void SnapShot::InternalSwap(SnapShot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapShot, lastincludeterm_)
      + sizeof(SnapShot::lastincludeterm_)
      - PROTOBUF_FIELD_OFFSET(SnapShot, lastincludeindex_)>(
          reinterpret_cast<char*>(&lastincludeindex_),
          reinterpret_cast<char*>(&other->lastincludeindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapShot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SnapShotInfo_DataEntry_DoNotUse::SnapShotInfo_DataEntry_DoNotUse() {}
SnapShotInfo_DataEntry_DoNotUse::SnapShotInfo_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SnapShotInfo_DataEntry_DoNotUse::MergeFrom(const SnapShotInfo_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SnapShotInfo_DataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SnapShotInfo_DataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SnapShotInfo_ClientseqEntry_DoNotUse::SnapShotInfo_ClientseqEntry_DoNotUse() {}
SnapShotInfo_ClientseqEntry_DoNotUse::SnapShotInfo_ClientseqEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SnapShotInfo_ClientseqEntry_DoNotUse::MergeFrom(const SnapShotInfo_ClientseqEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SnapShotInfo_ClientseqEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SnapShotInfo_ClientseqEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class SnapShotInfo::_Internal {
 public:
};

SnapShotInfo::SnapShotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena),
  clientseq_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rf.SnapShotInfo)
}
SnapShotInfo::SnapShotInfo(const SnapShotInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  clientseq_.MergeFrom(from.clientseq_);
  // @@protoc_insertion_point(copy_constructor:rf.SnapShotInfo)
}

void SnapShotInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapShotInfo_raft_2eproto.base);
}

SnapShotInfo::~SnapShotInfo() {
  // @@protoc_insertion_point(destructor:rf.SnapShotInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SnapShotInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SnapShotInfo::ArenaDtor(void* object) {
  SnapShotInfo* _this = reinterpret_cast< SnapShotInfo* >(object);
  (void)_this;
}
void SnapShotInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnapShotInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapShotInfo& SnapShotInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapShotInfo_raft_2eproto.base);
  return *internal_default_instance();
}


void SnapShotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rf.SnapShotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  clientseq_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapShotInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, int32> clientseq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&clientseq_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapShotInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf.SnapShotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> data = 1;
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "rf.SnapShotInfo.DataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "rf.SnapShotInfo.DataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SnapShotInfo_DataEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = SnapShotInfo_DataEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, int32> clientseq = 2;
  if (!this->_internal_clientseq().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_clientseq().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_clientseq().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_clientseq().begin();
          it != this->_internal_clientseq().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SnapShotInfo_ClientseqEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_clientseq().begin();
          it != this->_internal_clientseq().end(); ++it) {
        target = SnapShotInfo_ClientseqEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rf.SnapShotInfo)
  return target;
}

size_t SnapShotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rf.SnapShotInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += SnapShotInfo_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, int32> clientseq = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_clientseq_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_clientseq().begin();
      it != this->_internal_clientseq().end(); ++it) {
    total_size += SnapShotInfo_ClientseqEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapShotInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rf.SnapShotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapShotInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapShotInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rf.SnapShotInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rf.SnapShotInfo)
    MergeFrom(*source);
  }
}

void SnapShotInfo::MergeFrom(const SnapShotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rf.SnapShotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  clientseq_.MergeFrom(from.clientseq_);
}

void SnapShotInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rf.SnapShotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapShotInfo::CopyFrom(const SnapShotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rf.SnapShotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapShotInfo::IsInitialized() const {
  return true;
}

void SnapShotInfo::InternalSwap(SnapShotInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_);
  clientseq_.Swap(&other->clientseq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapShotInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InstallSnapShotResponse::_Internal {
 public:
};

InstallSnapShotResponse::InstallSnapShotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rf.InstallSnapShotResponse)
}
InstallSnapShotResponse::InstallSnapShotResponse(const InstallSnapShotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:rf.InstallSnapShotResponse)
}

void InstallSnapShotResponse::SharedCtor() {
  term_ = 0;
}

InstallSnapShotResponse::~InstallSnapShotResponse() {
  // @@protoc_insertion_point(destructor:rf.InstallSnapShotResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstallSnapShotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InstallSnapShotResponse::ArenaDtor(void* object) {
  InstallSnapShotResponse* _this = reinterpret_cast< InstallSnapShotResponse* >(object);
  (void)_this;
}
void InstallSnapShotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstallSnapShotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstallSnapShotResponse& InstallSnapShotResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstallSnapShotResponse_raft_2eproto.base);
  return *internal_default_instance();
}


void InstallSnapShotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rf.InstallSnapShotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  term_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallSnapShotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstallSnapShotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rf.InstallSnapShotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rf.InstallSnapShotResponse)
  return target;
}

size_t InstallSnapShotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rf.InstallSnapShotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstallSnapShotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rf.InstallSnapShotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallSnapShotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstallSnapShotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rf.InstallSnapShotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rf.InstallSnapShotResponse)
    MergeFrom(*source);
  }
}

void InstallSnapShotResponse::MergeFrom(const InstallSnapShotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rf.InstallSnapShotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
}

void InstallSnapShotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rf.InstallSnapShotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapShotResponse::CopyFrom(const InstallSnapShotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rf.InstallSnapShotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapShotResponse::IsInitialized() const {
  return true;
}

void InstallSnapShotResponse::InternalSwap(InstallSnapShotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(term_, other->term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallSnapShotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rf::AppendEntriesRequest* Arena::CreateMaybeMessage< ::rf::AppendEntriesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rf::AppendEntriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rf::AppendEntriesResponse* Arena::CreateMaybeMessage< ::rf::AppendEntriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rf::AppendEntriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::rf::RequestVote* Arena::CreateMaybeMessage< ::rf::RequestVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rf::RequestVote >(arena);
}
template<> PROTOBUF_NOINLINE ::rf::ResponseVote* Arena::CreateMaybeMessage< ::rf::ResponseVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rf::ResponseVote >(arena);
}
template<> PROTOBUF_NOINLINE ::rf::InstallSnapShotRequest* Arena::CreateMaybeMessage< ::rf::InstallSnapShotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rf::InstallSnapShotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rf::SnapShot* Arena::CreateMaybeMessage< ::rf::SnapShot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rf::SnapShot >(arena);
}
template<> PROTOBUF_NOINLINE ::rf::SnapShotInfo_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::rf::SnapShotInfo_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rf::SnapShotInfo_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::rf::SnapShotInfo_ClientseqEntry_DoNotUse* Arena::CreateMaybeMessage< ::rf::SnapShotInfo_ClientseqEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rf::SnapShotInfo_ClientseqEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::rf::SnapShotInfo* Arena::CreateMaybeMessage< ::rf::SnapShotInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rf::SnapShotInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rf::InstallSnapShotResponse* Arena::CreateMaybeMessage< ::rf::InstallSnapShotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rf::InstallSnapShotResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
