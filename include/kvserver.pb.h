// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kvserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kvserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kvserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kvserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kvserver_2eproto;
namespace kvrf {
class AckRequest;
class AckRequestDefaultTypeInternal;
extern AckRequestDefaultTypeInternal _AckRequest_default_instance_;
class AckResponse;
class AckResponseDefaultTypeInternal;
extern AckResponseDefaultTypeInternal _AckResponse_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class MigrationRequest;
class MigrationRequestDefaultTypeInternal;
extern MigrationRequestDefaultTypeInternal _MigrationRequest_default_instance_;
class MigrationResponse;
class MigrationResponseDefaultTypeInternal;
extern MigrationResponseDefaultTypeInternal _MigrationResponse_default_instance_;
class MigrationResponse_ClientreqEntry_DoNotUse;
class MigrationResponse_ClientreqEntry_DoNotUseDefaultTypeInternal;
extern MigrationResponse_ClientreqEntry_DoNotUseDefaultTypeInternal _MigrationResponse_ClientreqEntry_DoNotUse_default_instance_;
class MigrationResponse_DatabaseEntry_DoNotUse;
class MigrationResponse_DatabaseEntry_DoNotUseDefaultTypeInternal;
extern MigrationResponse_DatabaseEntry_DoNotUseDefaultTypeInternal _MigrationResponse_DatabaseEntry_DoNotUse_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
class PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace kvrf
PROTOBUF_NAMESPACE_OPEN
template<> ::kvrf::AckRequest* Arena::CreateMaybeMessage<::kvrf::AckRequest>(Arena*);
template<> ::kvrf::AckResponse* Arena::CreateMaybeMessage<::kvrf::AckResponse>(Arena*);
template<> ::kvrf::GetRequest* Arena::CreateMaybeMessage<::kvrf::GetRequest>(Arena*);
template<> ::kvrf::GetResponse* Arena::CreateMaybeMessage<::kvrf::GetResponse>(Arena*);
template<> ::kvrf::MigrationRequest* Arena::CreateMaybeMessage<::kvrf::MigrationRequest>(Arena*);
template<> ::kvrf::MigrationResponse* Arena::CreateMaybeMessage<::kvrf::MigrationResponse>(Arena*);
template<> ::kvrf::MigrationResponse_ClientreqEntry_DoNotUse* Arena::CreateMaybeMessage<::kvrf::MigrationResponse_ClientreqEntry_DoNotUse>(Arena*);
template<> ::kvrf::MigrationResponse_DatabaseEntry_DoNotUse* Arena::CreateMaybeMessage<::kvrf::MigrationResponse_DatabaseEntry_DoNotUse>(Arena*);
template<> ::kvrf::PutRequest* Arena::CreateMaybeMessage<::kvrf::PutRequest>(Arena*);
template<> ::kvrf::PutResponse* Arena::CreateMaybeMessage<::kvrf::PutResponse>(Arena*);
template<> ::kvrf::Request* Arena::CreateMaybeMessage<::kvrf::Request>(Arena*);
template<> ::kvrf::Response* Arena::CreateMaybeMessage<::kvrf::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kvrf {

// ===================================================================

class PutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrf.PutRequest) */ {
 public:
  inline PutRequest() : PutRequest(nullptr) {}
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutRequest& default_instance();

  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(nullptr);
  }

  PutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrf.PutRequest";
  }
  protected:
  explicit PutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kOpFieldNumber = 3,
    kClientIdFieldNumber = 4,
    kRequestIdFieldNumber = 5,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string op = 3;
  void clear_op();
  const std::string& op() const;
  void set_op(const std::string& value);
  void set_op(std::string&& value);
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  std::string* mutable_op();
  std::string* release_op();
  void set_allocated_op(std::string* op);
  private:
  const std::string& _internal_op() const;
  void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // int32 clientId = 4;
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::int32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientid() const;
  void _internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 requestId = 5;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrf.PutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientid_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class PutResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrf.PutResponse) */ {
 public:
  inline PutResponse() : PutResponse(nullptr) {}
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutResponse& default_instance();

  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutResponse* New() const final {
    return CreateMaybeMessage<PutResponse>(nullptr);
  }

  PutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrf.PutResponse";
  }
  protected:
  explicit PutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsWrongGroupFieldNumber = 1,
    kIsWrongLeaderFieldNumber = 2,
    kOKFieldNumber = 3,
  };
  // bool isWrongGroup = 1;
  void clear_iswronggroup();
  bool iswronggroup() const;
  void set_iswronggroup(bool value);
  private:
  bool _internal_iswronggroup() const;
  void _internal_set_iswronggroup(bool value);
  public:

  // bool isWrongLeader = 2;
  void clear_iswrongleader();
  bool iswrongleader() const;
  void set_iswrongleader(bool value);
  private:
  bool _internal_iswrongleader() const;
  void _internal_set_iswrongleader(bool value);
  public:

  // bool OK = 3;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kvrf.PutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool iswronggroup_;
  bool iswrongleader_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class GetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrf.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRequest& default_instance();

  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(nullptr);
  }

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrf.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 clientId = 2;
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::int32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientid() const;
  void _internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 requestId = 3;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrf.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientid_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class GetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrf.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponse& default_instance();

  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(nullptr);
  }

  GetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrf.GetResponse";
  }
  protected:
  explicit GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kIsWrongGroupFieldNumber = 1,
    kIsWrongLeaderFieldNumber = 2,
    kIsExistFieldNumber = 4,
  };
  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool isWrongGroup = 1;
  void clear_iswronggroup();
  bool iswronggroup() const;
  void set_iswronggroup(bool value);
  private:
  bool _internal_iswronggroup() const;
  void _internal_set_iswronggroup(bool value);
  public:

  // bool isWrongLeader = 2;
  void clear_iswrongleader();
  bool iswrongleader() const;
  void set_iswrongleader(bool value);
  private:
  bool _internal_iswrongleader() const;
  void _internal_set_iswrongleader(bool value);
  public:

  // bool isExist = 4;
  void clear_isexist();
  bool isexist() const;
  void set_isexist(bool value);
  private:
  bool _internal_isexist() const;
  void _internal_set_isexist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kvrf.GetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool iswronggroup_;
  bool iswrongleader_;
  bool isexist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrf.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrf.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRequestMsgFieldNumber = 2,
  };
  // bytes type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes request_msg = 2;
  void clear_request_msg();
  const std::string& request_msg() const;
  void set_request_msg(const std::string& value);
  void set_request_msg(std::string&& value);
  void set_request_msg(const char* value);
  void set_request_msg(const void* value, size_t size);
  std::string* mutable_request_msg();
  std::string* release_request_msg();
  void set_allocated_request_msg(std::string* request_msg);
  private:
  const std::string& _internal_request_msg() const;
  void _internal_set_request_msg(const std::string& value);
  std::string* _internal_mutable_request_msg();
  public:

  // @@protoc_insertion_point(class_scope:kvrf.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrf.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrf.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kResponseMsgFieldNumber = 3,
    kIsWrongLeaderFieldNumber = 2,
  };
  // bytes type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes response_msg = 3;
  void clear_response_msg();
  const std::string& response_msg() const;
  void set_response_msg(const std::string& value);
  void set_response_msg(std::string&& value);
  void set_response_msg(const char* value);
  void set_response_msg(const void* value, size_t size);
  std::string* mutable_response_msg();
  std::string* release_response_msg();
  void set_allocated_response_msg(std::string* response_msg);
  private:
  const std::string& _internal_response_msg() const;
  void _internal_set_response_msg(const std::string& value);
  std::string* _internal_mutable_response_msg();
  public:

  // bool isWrongLeader = 2;
  void clear_iswrongleader();
  bool iswrongleader() const;
  void set_iswrongleader(bool value);
  private:
  bool _internal_iswrongleader() const;
  void _internal_set_iswrongleader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kvrf.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_msg_;
  bool iswrongleader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class MigrationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrf.MigrationRequest) */ {
 public:
  inline MigrationRequest() : MigrationRequest(nullptr) {}
  virtual ~MigrationRequest();

  MigrationRequest(const MigrationRequest& from);
  MigrationRequest(MigrationRequest&& from) noexcept
    : MigrationRequest() {
    *this = ::std::move(from);
  }

  inline MigrationRequest& operator=(const MigrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrationRequest& operator=(MigrationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MigrationRequest& default_instance();

  static inline const MigrationRequest* internal_default_instance() {
    return reinterpret_cast<const MigrationRequest*>(
               &_MigrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MigrationRequest& a, MigrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MigrationRequest* New() const final {
    return CreateMaybeMessage<MigrationRequest>(nullptr);
  }

  MigrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MigrationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MigrationRequest& from);
  void MergeFrom(const MigrationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrf.MigrationRequest";
  }
  protected:
  explicit MigrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardidFieldNumber = 1,
    kConfigidFieldNumber = 2,
  };
  // int32 shardid = 1;
  void clear_shardid();
  ::PROTOBUF_NAMESPACE_ID::int32 shardid() const;
  void set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shardid() const;
  void _internal_set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 configid = 2;
  void clear_configid();
  ::PROTOBUF_NAMESPACE_ID::int32 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_configid() const;
  void _internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrf.MigrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 shardid_;
  ::PROTOBUF_NAMESPACE_ID::int32 configid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class MigrationResponse_DatabaseEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MigrationResponse_DatabaseEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MigrationResponse_DatabaseEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  MigrationResponse_DatabaseEntry_DoNotUse();
  explicit MigrationResponse_DatabaseEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MigrationResponse_DatabaseEntry_DoNotUse& other);
  static const MigrationResponse_DatabaseEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MigrationResponse_DatabaseEntry_DoNotUse*>(&_MigrationResponse_DatabaseEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kvrf.MigrationResponse.DatabaseEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class MigrationResponse_ClientreqEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MigrationResponse_ClientreqEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MigrationResponse_ClientreqEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  MigrationResponse_ClientreqEntry_DoNotUse();
  explicit MigrationResponse_ClientreqEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MigrationResponse_ClientreqEntry_DoNotUse& other);
  static const MigrationResponse_ClientreqEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MigrationResponse_ClientreqEntry_DoNotUse*>(&_MigrationResponse_ClientreqEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class MigrationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrf.MigrationResponse) */ {
 public:
  inline MigrationResponse() : MigrationResponse(nullptr) {}
  virtual ~MigrationResponse();

  MigrationResponse(const MigrationResponse& from);
  MigrationResponse(MigrationResponse&& from) noexcept
    : MigrationResponse() {
    *this = ::std::move(from);
  }

  inline MigrationResponse& operator=(const MigrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrationResponse& operator=(MigrationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MigrationResponse& default_instance();

  static inline const MigrationResponse* internal_default_instance() {
    return reinterpret_cast<const MigrationResponse*>(
               &_MigrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MigrationResponse& a, MigrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MigrationResponse* New() const final {
    return CreateMaybeMessage<MigrationResponse>(nullptr);
  }

  MigrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MigrationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MigrationResponse& from);
  void MergeFrom(const MigrationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrf.MigrationResponse";
  }
  protected:
  explicit MigrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 4,
    kClientreqFieldNumber = 5,
    kErrFieldNumber = 1,
    kShardidFieldNumber = 2,
    kConfigidFieldNumber = 3,
  };
  // map<string, bytes> database = 4;
  int database_size() const;
  private:
  int _internal_database_size() const;
  public:
  void clear_database();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_database() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_database();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      database() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_database();

  // map<int32, int32> clientreq = 5;
  int clientreq_size() const;
  private:
  int _internal_clientreq_size() const;
  public:
  void clear_clientreq();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_clientreq() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_clientreq();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      clientreq() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_clientreq();

  // bytes err = 1;
  void clear_err();
  const std::string& err() const;
  void set_err(const std::string& value);
  void set_err(std::string&& value);
  void set_err(const char* value);
  void set_err(const void* value, size_t size);
  std::string* mutable_err();
  std::string* release_err();
  void set_allocated_err(std::string* err);
  private:
  const std::string& _internal_err() const;
  void _internal_set_err(const std::string& value);
  std::string* _internal_mutable_err();
  public:

  // int32 shardid = 2;
  void clear_shardid();
  ::PROTOBUF_NAMESPACE_ID::int32 shardid() const;
  void set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shardid() const;
  void _internal_set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 configid = 3;
  void clear_configid();
  ::PROTOBUF_NAMESPACE_ID::int32 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_configid() const;
  void _internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrf.MigrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MigrationResponse_DatabaseEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> database_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MigrationResponse_ClientreqEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> clientreq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_;
  ::PROTOBUF_NAMESPACE_ID::int32 shardid_;
  ::PROTOBUF_NAMESPACE_ID::int32 configid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class AckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrf.AckRequest) */ {
 public:
  inline AckRequest() : AckRequest(nullptr) {}
  virtual ~AckRequest();

  AckRequest(const AckRequest& from);
  AckRequest(AckRequest&& from) noexcept
    : AckRequest() {
    *this = ::std::move(from);
  }

  inline AckRequest& operator=(const AckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckRequest& operator=(AckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckRequest& default_instance();

  static inline const AckRequest* internal_default_instance() {
    return reinterpret_cast<const AckRequest*>(
               &_AckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AckRequest& a, AckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckRequest* New() const final {
    return CreateMaybeMessage<AckRequest>(nullptr);
  }

  AckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckRequest& from);
  void MergeFrom(const AckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrf.AckRequest";
  }
  protected:
  explicit AckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigidFieldNumber = 1,
    kShardidFieldNumber = 2,
  };
  // int32 configid = 1;
  void clear_configid();
  ::PROTOBUF_NAMESPACE_ID::int32 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_configid() const;
  void _internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 shardid = 2;
  void clear_shardid();
  ::PROTOBUF_NAMESPACE_ID::int32 shardid() const;
  void set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shardid() const;
  void _internal_set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrf.AckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 configid_;
  ::PROTOBUF_NAMESPACE_ID::int32 shardid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class AckResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrf.AckResponse) */ {
 public:
  inline AckResponse() : AckResponse(nullptr) {}
  virtual ~AckResponse();

  AckResponse(const AckResponse& from);
  AckResponse(AckResponse&& from) noexcept
    : AckResponse() {
    *this = ::std::move(from);
  }

  inline AckResponse& operator=(const AckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckResponse& operator=(AckResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckResponse& default_instance();

  static inline const AckResponse* internal_default_instance() {
    return reinterpret_cast<const AckResponse*>(
               &_AckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AckResponse& a, AckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AckResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckResponse* New() const final {
    return CreateMaybeMessage<AckResponse>(nullptr);
  }

  AckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckResponse& from);
  void MergeFrom(const AckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrf.AckResponse";
  }
  protected:
  explicit AckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvserver_2eproto);
    return ::descriptor_table_kvserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kReceivedFieldNumber = 1,
  };
  // bytes error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const void* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool received = 1;
  void clear_received();
  bool received() const;
  void set_received(bool value);
  private:
  bool _internal_received() const;
  void _internal_set_received(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kvrf.AckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool received_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PutRequest

// string key = 1;
inline void PutRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrf.PutRequest.key)
  return _internal_key();
}
inline void PutRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kvrf.PutRequest.key)
}
inline std::string* PutRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kvrf.PutRequest.key)
  return _internal_mutable_key();
}
inline const std::string& PutRequest::_internal_key() const {
  return key_.Get();
}
inline void PutRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrf.PutRequest.key)
}
inline void PutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrf.PutRequest.key)
}
inline void PutRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrf.PutRequest.key)
}
inline std::string* PutRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrf.PutRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrf.PutRequest.key)
}

// string value = 2;
inline void PutRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:kvrf.PutRequest.value)
  return _internal_value();
}
inline void PutRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kvrf.PutRequest.value)
}
inline std::string* PutRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kvrf.PutRequest.value)
  return _internal_mutable_value();
}
inline const std::string& PutRequest::_internal_value() const {
  return value_.Get();
}
inline void PutRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutRequest::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrf.PutRequest.value)
}
inline void PutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrf.PutRequest.value)
}
inline void PutRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrf.PutRequest.value)
}
inline std::string* PutRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:kvrf.PutRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrf.PutRequest.value)
}

// string op = 3;
inline void PutRequest::clear_op() {
  op_.ClearToEmpty();
}
inline const std::string& PutRequest::op() const {
  // @@protoc_insertion_point(field_get:kvrf.PutRequest.op)
  return _internal_op();
}
inline void PutRequest::set_op(const std::string& value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:kvrf.PutRequest.op)
}
inline std::string* PutRequest::mutable_op() {
  // @@protoc_insertion_point(field_mutable:kvrf.PutRequest.op)
  return _internal_mutable_op();
}
inline const std::string& PutRequest::_internal_op() const {
  return op_.Get();
}
inline void PutRequest::_internal_set_op(const std::string& value) {
  
  op_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutRequest::set_op(std::string&& value) {
  
  op_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrf.PutRequest.op)
}
inline void PutRequest::set_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrf.PutRequest.op)
}
inline void PutRequest::set_op(const char* value,
    size_t size) {
  
  op_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrf.PutRequest.op)
}
inline std::string* PutRequest::_internal_mutable_op() {
  
  return op_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutRequest::release_op() {
  // @@protoc_insertion_point(field_release:kvrf.PutRequest.op)
  return op_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutRequest::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  op_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrf.PutRequest.op)
}

// int32 clientId = 4;
inline void PutRequest::clear_clientid() {
  clientid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutRequest::_internal_clientid() const {
  return clientid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutRequest::clientid() const {
  // @@protoc_insertion_point(field_get:kvrf.PutRequest.clientId)
  return _internal_clientid();
}
inline void PutRequest::_internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientid_ = value;
}
inline void PutRequest::set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:kvrf.PutRequest.clientId)
}

// int32 requestId = 5;
inline void PutRequest::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutRequest::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutRequest::requestid() const {
  // @@protoc_insertion_point(field_get:kvrf.PutRequest.requestId)
  return _internal_requestid();
}
inline void PutRequest::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void PutRequest::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:kvrf.PutRequest.requestId)
}

// -------------------------------------------------------------------

// PutResponse

// bool isWrongGroup = 1;
inline void PutResponse::clear_iswronggroup() {
  iswronggroup_ = false;
}
inline bool PutResponse::_internal_iswronggroup() const {
  return iswronggroup_;
}
inline bool PutResponse::iswronggroup() const {
  // @@protoc_insertion_point(field_get:kvrf.PutResponse.isWrongGroup)
  return _internal_iswronggroup();
}
inline void PutResponse::_internal_set_iswronggroup(bool value) {
  
  iswronggroup_ = value;
}
inline void PutResponse::set_iswronggroup(bool value) {
  _internal_set_iswronggroup(value);
  // @@protoc_insertion_point(field_set:kvrf.PutResponse.isWrongGroup)
}

// bool isWrongLeader = 2;
inline void PutResponse::clear_iswrongleader() {
  iswrongleader_ = false;
}
inline bool PutResponse::_internal_iswrongleader() const {
  return iswrongleader_;
}
inline bool PutResponse::iswrongleader() const {
  // @@protoc_insertion_point(field_get:kvrf.PutResponse.isWrongLeader)
  return _internal_iswrongleader();
}
inline void PutResponse::_internal_set_iswrongleader(bool value) {
  
  iswrongleader_ = value;
}
inline void PutResponse::set_iswrongleader(bool value) {
  _internal_set_iswrongleader(value);
  // @@protoc_insertion_point(field_set:kvrf.PutResponse.isWrongLeader)
}

// bool OK = 3;
inline void PutResponse::clear_ok() {
  ok_ = false;
}
inline bool PutResponse::_internal_ok() const {
  return ok_;
}
inline bool PutResponse::ok() const {
  // @@protoc_insertion_point(field_get:kvrf.PutResponse.OK)
  return _internal_ok();
}
inline void PutResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void PutResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:kvrf.PutResponse.OK)
}

// -------------------------------------------------------------------

// GetRequest

// string key = 1;
inline void GetRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrf.GetRequest.key)
  return _internal_key();
}
inline void GetRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kvrf.GetRequest.key)
}
inline std::string* GetRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kvrf.GetRequest.key)
  return _internal_mutable_key();
}
inline const std::string& GetRequest::_internal_key() const {
  return key_.Get();
}
inline void GetRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrf.GetRequest.key)
}
inline void GetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrf.GetRequest.key)
}
inline void GetRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrf.GetRequest.key)
}
inline std::string* GetRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrf.GetRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrf.GetRequest.key)
}

// int32 clientId = 2;
inline void GetRequest::clear_clientid() {
  clientid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRequest::_internal_clientid() const {
  return clientid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRequest::clientid() const {
  // @@protoc_insertion_point(field_get:kvrf.GetRequest.clientId)
  return _internal_clientid();
}
inline void GetRequest::_internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientid_ = value;
}
inline void GetRequest::set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:kvrf.GetRequest.clientId)
}

// int32 requestId = 3;
inline void GetRequest::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRequest::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRequest::requestid() const {
  // @@protoc_insertion_point(field_get:kvrf.GetRequest.requestId)
  return _internal_requestid();
}
inline void GetRequest::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void GetRequest::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:kvrf.GetRequest.requestId)
}

// -------------------------------------------------------------------

// GetResponse

// bool isWrongGroup = 1;
inline void GetResponse::clear_iswronggroup() {
  iswronggroup_ = false;
}
inline bool GetResponse::_internal_iswronggroup() const {
  return iswronggroup_;
}
inline bool GetResponse::iswronggroup() const {
  // @@protoc_insertion_point(field_get:kvrf.GetResponse.isWrongGroup)
  return _internal_iswronggroup();
}
inline void GetResponse::_internal_set_iswronggroup(bool value) {
  
  iswronggroup_ = value;
}
inline void GetResponse::set_iswronggroup(bool value) {
  _internal_set_iswronggroup(value);
  // @@protoc_insertion_point(field_set:kvrf.GetResponse.isWrongGroup)
}

// bool isWrongLeader = 2;
inline void GetResponse::clear_iswrongleader() {
  iswrongleader_ = false;
}
inline bool GetResponse::_internal_iswrongleader() const {
  return iswrongleader_;
}
inline bool GetResponse::iswrongleader() const {
  // @@protoc_insertion_point(field_get:kvrf.GetResponse.isWrongLeader)
  return _internal_iswrongleader();
}
inline void GetResponse::_internal_set_iswrongleader(bool value) {
  
  iswrongleader_ = value;
}
inline void GetResponse::set_iswrongleader(bool value) {
  _internal_set_iswrongleader(value);
  // @@protoc_insertion_point(field_set:kvrf.GetResponse.isWrongLeader)
}

// string value = 3;
inline void GetResponse::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:kvrf.GetResponse.value)
  return _internal_value();
}
inline void GetResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kvrf.GetResponse.value)
}
inline std::string* GetResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kvrf.GetResponse.value)
  return _internal_mutable_value();
}
inline const std::string& GetResponse::_internal_value() const {
  return value_.Get();
}
inline void GetResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponse::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrf.GetResponse.value)
}
inline void GetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrf.GetResponse.value)
}
inline void GetResponse::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrf.GetResponse.value)
}
inline std::string* GetResponse::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvrf.GetResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrf.GetResponse.value)
}

// bool isExist = 4;
inline void GetResponse::clear_isexist() {
  isexist_ = false;
}
inline bool GetResponse::_internal_isexist() const {
  return isexist_;
}
inline bool GetResponse::isexist() const {
  // @@protoc_insertion_point(field_get:kvrf.GetResponse.isExist)
  return _internal_isexist();
}
inline void GetResponse::_internal_set_isexist(bool value) {
  
  isexist_ = value;
}
inline void GetResponse::set_isexist(bool value) {
  _internal_set_isexist(value);
  // @@protoc_insertion_point(field_set:kvrf.GetResponse.isExist)
}

// -------------------------------------------------------------------

// Request

// bytes type = 1;
inline void Request::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Request::type() const {
  // @@protoc_insertion_point(field_get:kvrf.Request.type)
  return _internal_type();
}
inline void Request::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kvrf.Request.type)
}
inline std::string* Request::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kvrf.Request.type)
  return _internal_mutable_type();
}
inline const std::string& Request::_internal_type() const {
  return type_.Get();
}
inline void Request::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrf.Request.type)
}
inline void Request::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrf.Request.type)
}
inline void Request::set_type(const void* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrf.Request.type)
}
inline std::string* Request::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_type() {
  // @@protoc_insertion_point(field_release:kvrf.Request.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrf.Request.type)
}

// bytes request_msg = 2;
inline void Request::clear_request_msg() {
  request_msg_.ClearToEmpty();
}
inline const std::string& Request::request_msg() const {
  // @@protoc_insertion_point(field_get:kvrf.Request.request_msg)
  return _internal_request_msg();
}
inline void Request::set_request_msg(const std::string& value) {
  _internal_set_request_msg(value);
  // @@protoc_insertion_point(field_set:kvrf.Request.request_msg)
}
inline std::string* Request::mutable_request_msg() {
  // @@protoc_insertion_point(field_mutable:kvrf.Request.request_msg)
  return _internal_mutable_request_msg();
}
inline const std::string& Request::_internal_request_msg() const {
  return request_msg_.Get();
}
inline void Request::_internal_set_request_msg(const std::string& value) {
  
  request_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_request_msg(std::string&& value) {
  
  request_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrf.Request.request_msg)
}
inline void Request::set_request_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrf.Request.request_msg)
}
inline void Request::set_request_msg(const void* value,
    size_t size) {
  
  request_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrf.Request.request_msg)
}
inline std::string* Request::_internal_mutable_request_msg() {
  
  return request_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_request_msg() {
  // @@protoc_insertion_point(field_release:kvrf.Request.request_msg)
  return request_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_request_msg(std::string* request_msg) {
  if (request_msg != nullptr) {
    
  } else {
    
  }
  request_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrf.Request.request_msg)
}

// -------------------------------------------------------------------

// Response

// bytes type = 1;
inline void Response::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Response::type() const {
  // @@protoc_insertion_point(field_get:kvrf.Response.type)
  return _internal_type();
}
inline void Response::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kvrf.Response.type)
}
inline std::string* Response::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kvrf.Response.type)
  return _internal_mutable_type();
}
inline const std::string& Response::_internal_type() const {
  return type_.Get();
}
inline void Response::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrf.Response.type)
}
inline void Response::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrf.Response.type)
}
inline void Response::set_type(const void* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrf.Response.type)
}
inline std::string* Response::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_type() {
  // @@protoc_insertion_point(field_release:kvrf.Response.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrf.Response.type)
}

// bool isWrongLeader = 2;
inline void Response::clear_iswrongleader() {
  iswrongleader_ = false;
}
inline bool Response::_internal_iswrongleader() const {
  return iswrongleader_;
}
inline bool Response::iswrongleader() const {
  // @@protoc_insertion_point(field_get:kvrf.Response.isWrongLeader)
  return _internal_iswrongleader();
}
inline void Response::_internal_set_iswrongleader(bool value) {
  
  iswrongleader_ = value;
}
inline void Response::set_iswrongleader(bool value) {
  _internal_set_iswrongleader(value);
  // @@protoc_insertion_point(field_set:kvrf.Response.isWrongLeader)
}

// bytes response_msg = 3;
inline void Response::clear_response_msg() {
  response_msg_.ClearToEmpty();
}
inline const std::string& Response::response_msg() const {
  // @@protoc_insertion_point(field_get:kvrf.Response.response_msg)
  return _internal_response_msg();
}
inline void Response::set_response_msg(const std::string& value) {
  _internal_set_response_msg(value);
  // @@protoc_insertion_point(field_set:kvrf.Response.response_msg)
}
inline std::string* Response::mutable_response_msg() {
  // @@protoc_insertion_point(field_mutable:kvrf.Response.response_msg)
  return _internal_mutable_response_msg();
}
inline const std::string& Response::_internal_response_msg() const {
  return response_msg_.Get();
}
inline void Response::_internal_set_response_msg(const std::string& value) {
  
  response_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_response_msg(std::string&& value) {
  
  response_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrf.Response.response_msg)
}
inline void Response::set_response_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrf.Response.response_msg)
}
inline void Response::set_response_msg(const void* value,
    size_t size) {
  
  response_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrf.Response.response_msg)
}
inline std::string* Response::_internal_mutable_response_msg() {
  
  return response_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_response_msg() {
  // @@protoc_insertion_point(field_release:kvrf.Response.response_msg)
  return response_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_response_msg(std::string* response_msg) {
  if (response_msg != nullptr) {
    
  } else {
    
  }
  response_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrf.Response.response_msg)
}

// -------------------------------------------------------------------

// MigrationRequest

// int32 shardid = 1;
inline void MigrationRequest::clear_shardid() {
  shardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MigrationRequest::_internal_shardid() const {
  return shardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MigrationRequest::shardid() const {
  // @@protoc_insertion_point(field_get:kvrf.MigrationRequest.shardid)
  return _internal_shardid();
}
inline void MigrationRequest::_internal_set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shardid_ = value;
}
inline void MigrationRequest::set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shardid(value);
  // @@protoc_insertion_point(field_set:kvrf.MigrationRequest.shardid)
}

// int32 configid = 2;
inline void MigrationRequest::clear_configid() {
  configid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MigrationRequest::_internal_configid() const {
  return configid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MigrationRequest::configid() const {
  // @@protoc_insertion_point(field_get:kvrf.MigrationRequest.configid)
  return _internal_configid();
}
inline void MigrationRequest::_internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  configid_ = value;
}
inline void MigrationRequest::set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:kvrf.MigrationRequest.configid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MigrationResponse

// bytes err = 1;
inline void MigrationResponse::clear_err() {
  err_.ClearToEmpty();
}
inline const std::string& MigrationResponse::err() const {
  // @@protoc_insertion_point(field_get:kvrf.MigrationResponse.err)
  return _internal_err();
}
inline void MigrationResponse::set_err(const std::string& value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:kvrf.MigrationResponse.err)
}
inline std::string* MigrationResponse::mutable_err() {
  // @@protoc_insertion_point(field_mutable:kvrf.MigrationResponse.err)
  return _internal_mutable_err();
}
inline const std::string& MigrationResponse::_internal_err() const {
  return err_.Get();
}
inline void MigrationResponse::_internal_set_err(const std::string& value) {
  
  err_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MigrationResponse::set_err(std::string&& value) {
  
  err_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrf.MigrationResponse.err)
}
inline void MigrationResponse::set_err(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrf.MigrationResponse.err)
}
inline void MigrationResponse::set_err(const void* value,
    size_t size) {
  
  err_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrf.MigrationResponse.err)
}
inline std::string* MigrationResponse::_internal_mutable_err() {
  
  return err_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MigrationResponse::release_err() {
  // @@protoc_insertion_point(field_release:kvrf.MigrationResponse.err)
  return err_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MigrationResponse::set_allocated_err(std::string* err) {
  if (err != nullptr) {
    
  } else {
    
  }
  err_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrf.MigrationResponse.err)
}

// int32 shardid = 2;
inline void MigrationResponse::clear_shardid() {
  shardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MigrationResponse::_internal_shardid() const {
  return shardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MigrationResponse::shardid() const {
  // @@protoc_insertion_point(field_get:kvrf.MigrationResponse.shardid)
  return _internal_shardid();
}
inline void MigrationResponse::_internal_set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shardid_ = value;
}
inline void MigrationResponse::set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shardid(value);
  // @@protoc_insertion_point(field_set:kvrf.MigrationResponse.shardid)
}

// int32 configid = 3;
inline void MigrationResponse::clear_configid() {
  configid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MigrationResponse::_internal_configid() const {
  return configid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MigrationResponse::configid() const {
  // @@protoc_insertion_point(field_get:kvrf.MigrationResponse.configid)
  return _internal_configid();
}
inline void MigrationResponse::_internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  configid_ = value;
}
inline void MigrationResponse::set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:kvrf.MigrationResponse.configid)
}

// map<string, bytes> database = 4;
inline int MigrationResponse::_internal_database_size() const {
  return database_.size();
}
inline int MigrationResponse::database_size() const {
  return _internal_database_size();
}
inline void MigrationResponse::clear_database() {
  database_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MigrationResponse::_internal_database() const {
  return database_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MigrationResponse::database() const {
  // @@protoc_insertion_point(field_map:kvrf.MigrationResponse.database)
  return _internal_database();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MigrationResponse::_internal_mutable_database() {
  return database_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MigrationResponse::mutable_database() {
  // @@protoc_insertion_point(field_mutable_map:kvrf.MigrationResponse.database)
  return _internal_mutable_database();
}

// map<int32, int32> clientreq = 5;
inline int MigrationResponse::_internal_clientreq_size() const {
  return clientreq_.size();
}
inline int MigrationResponse::clientreq_size() const {
  return _internal_clientreq_size();
}
inline void MigrationResponse::clear_clientreq() {
  clientreq_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
MigrationResponse::_internal_clientreq() const {
  return clientreq_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
MigrationResponse::clientreq() const {
  // @@protoc_insertion_point(field_map:kvrf.MigrationResponse.clientreq)
  return _internal_clientreq();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
MigrationResponse::_internal_mutable_clientreq() {
  return clientreq_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
MigrationResponse::mutable_clientreq() {
  // @@protoc_insertion_point(field_mutable_map:kvrf.MigrationResponse.clientreq)
  return _internal_mutable_clientreq();
}

// -------------------------------------------------------------------

// AckRequest

// int32 configid = 1;
inline void AckRequest::clear_configid() {
  configid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckRequest::_internal_configid() const {
  return configid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckRequest::configid() const {
  // @@protoc_insertion_point(field_get:kvrf.AckRequest.configid)
  return _internal_configid();
}
inline void AckRequest::_internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  configid_ = value;
}
inline void AckRequest::set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:kvrf.AckRequest.configid)
}

// int32 shardid = 2;
inline void AckRequest::clear_shardid() {
  shardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckRequest::_internal_shardid() const {
  return shardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckRequest::shardid() const {
  // @@protoc_insertion_point(field_get:kvrf.AckRequest.shardid)
  return _internal_shardid();
}
inline void AckRequest::_internal_set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shardid_ = value;
}
inline void AckRequest::set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shardid(value);
  // @@protoc_insertion_point(field_set:kvrf.AckRequest.shardid)
}

// -------------------------------------------------------------------

// AckResponse

// bool received = 1;
inline void AckResponse::clear_received() {
  received_ = false;
}
inline bool AckResponse::_internal_received() const {
  return received_;
}
inline bool AckResponse::received() const {
  // @@protoc_insertion_point(field_get:kvrf.AckResponse.received)
  return _internal_received();
}
inline void AckResponse::_internal_set_received(bool value) {
  
  received_ = value;
}
inline void AckResponse::set_received(bool value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:kvrf.AckResponse.received)
}

// bytes error = 2;
inline void AckResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& AckResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrf.AckResponse.error)
  return _internal_error();
}
inline void AckResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:kvrf.AckResponse.error)
}
inline std::string* AckResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:kvrf.AckResponse.error)
  return _internal_mutable_error();
}
inline const std::string& AckResponse::_internal_error() const {
  return error_.Get();
}
inline void AckResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AckResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrf.AckResponse.error)
}
inline void AckResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrf.AckResponse.error)
}
inline void AckResponse::set_error(const void* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrf.AckResponse.error)
}
inline std::string* AckResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AckResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrf.AckResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AckResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrf.AckResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kvrf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kvserver_2eproto
