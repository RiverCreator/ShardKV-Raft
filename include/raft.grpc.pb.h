// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft.proto
#ifndef GRPC_raft_2eproto__INCLUDED
#define GRPC_raft_2eproto__INCLUDED

#include "raft.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace rf {

class RaftServerRpc final {
 public:
  static constexpr char const* service_full_name() {
    return "rf.RaftServerRpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::rf::AppendEntriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::AppendEntriesResponse>> AsyncAppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::AppendEntriesResponse>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::AppendEntriesResponse>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::AppendEntriesResponse>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    virtual ::grpc::Status Vote(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::rf::ResponseVote* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::ResponseVote>> AsyncVote(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::ResponseVote>>(AsyncVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::ResponseVote>> PrepareAsyncVote(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::ResponseVote>>(PrepareAsyncVoteRaw(context, request, cq));
    }
    virtual ::grpc::Status InstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::rf::InstallSnapShotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::InstallSnapShotResponse>> AsyncInstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::InstallSnapShotResponse>>(AsyncInstallSnapShotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::InstallSnapShotResponse>> PrepareAsyncInstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rf::InstallSnapShotResponse>>(PrepareAsyncInstallSnapShotRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void AppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest* request, ::rf::AppendEntriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::AppendEntriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest* request, ::rf::AppendEntriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest* request, ::rf::AppendEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::AppendEntriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::AppendEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Vote(::grpc::ClientContext* context, const ::rf::RequestVote* request, ::rf::ResponseVote* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Vote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::ResponseVote* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Vote(::grpc::ClientContext* context, const ::rf::RequestVote* request, ::rf::ResponseVote* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Vote(::grpc::ClientContext* context, const ::rf::RequestVote* request, ::rf::ResponseVote* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Vote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::ResponseVote* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Vote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::ResponseVote* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest* request, ::rf::InstallSnapShotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InstallSnapShot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::InstallSnapShotResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest* request, ::rf::InstallSnapShotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest* request, ::rf::InstallSnapShotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InstallSnapShot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::InstallSnapShotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InstallSnapShot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::InstallSnapShotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rf::AppendEntriesResponse>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rf::AppendEntriesResponse>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rf::ResponseVote>* AsyncVoteRaw(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rf::ResponseVote>* PrepareAsyncVoteRaw(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rf::InstallSnapShotResponse>* AsyncInstallSnapShotRaw(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rf::InstallSnapShotResponse>* PrepareAsyncInstallSnapShotRaw(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::rf::AppendEntriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::AppendEntriesResponse>> AsyncAppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::AppendEntriesResponse>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::AppendEntriesResponse>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::AppendEntriesResponse>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    ::grpc::Status Vote(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::rf::ResponseVote* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::ResponseVote>> AsyncVote(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::ResponseVote>>(AsyncVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::ResponseVote>> PrepareAsyncVote(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::ResponseVote>>(PrepareAsyncVoteRaw(context, request, cq));
    }
    ::grpc::Status InstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::rf::InstallSnapShotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::InstallSnapShotResponse>> AsyncInstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::InstallSnapShotResponse>>(AsyncInstallSnapShotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::InstallSnapShotResponse>> PrepareAsyncInstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rf::InstallSnapShotResponse>>(PrepareAsyncInstallSnapShotRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest* request, ::rf::AppendEntriesResponse* response, std::function<void(::grpc::Status)>) override;
      void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::AppendEntriesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest* request, ::rf::AppendEntriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest* request, ::rf::AppendEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::AppendEntriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::AppendEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Vote(::grpc::ClientContext* context, const ::rf::RequestVote* request, ::rf::ResponseVote* response, std::function<void(::grpc::Status)>) override;
      void Vote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::ResponseVote* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Vote(::grpc::ClientContext* context, const ::rf::RequestVote* request, ::rf::ResponseVote* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Vote(::grpc::ClientContext* context, const ::rf::RequestVote* request, ::rf::ResponseVote* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Vote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::ResponseVote* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Vote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::ResponseVote* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest* request, ::rf::InstallSnapShotResponse* response, std::function<void(::grpc::Status)>) override;
      void InstallSnapShot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::InstallSnapShotResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest* request, ::rf::InstallSnapShotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest* request, ::rf::InstallSnapShotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InstallSnapShot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::InstallSnapShotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InstallSnapShot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::InstallSnapShotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rf::AppendEntriesResponse>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rf::AppendEntriesResponse>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rf::ResponseVote>* AsyncVoteRaw(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rf::ResponseVote>* PrepareAsyncVoteRaw(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rf::InstallSnapShotResponse>* AsyncInstallSnapShotRaw(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rf::InstallSnapShotResponse>* PrepareAsyncInstallSnapShotRaw(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AppendEntries_;
    const ::grpc::internal::RpcMethod rpcmethod_Vote_;
    const ::grpc::internal::RpcMethod rpcmethod_InstallSnapShot_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::rf::AppendEntriesRequest* request, ::rf::AppendEntriesResponse* response);
    virtual ::grpc::Status Vote(::grpc::ServerContext* context, const ::rf::RequestVote* request, ::rf::ResponseVote* response);
    virtual ::grpc::Status InstallSnapShot(::grpc::ServerContext* context, const ::rf::InstallSnapShotRequest* request, ::rf::InstallSnapShotResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AppendEntries() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::rf::AppendEntriesRequest* /*request*/, ::rf::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::rf::AppendEntriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::rf::AppendEntriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Vote() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::rf::RequestVote* /*request*/, ::rf::ResponseVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVote(::grpc::ServerContext* context, ::rf::RequestVote* request, ::grpc::ServerAsyncResponseWriter< ::rf::ResponseVote>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InstallSnapShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InstallSnapShot() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InstallSnapShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapShot(::grpc::ServerContext* /*context*/, const ::rf::InstallSnapShotRequest* /*request*/, ::rf::InstallSnapShotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallSnapShot(::grpc::ServerContext* context, ::rf::InstallSnapShotRequest* request, ::grpc::ServerAsyncResponseWriter< ::rf::InstallSnapShotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AppendEntries<WithAsyncMethod_Vote<WithAsyncMethod_InstallSnapShot<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AppendEntries() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::rf::AppendEntriesRequest, ::rf::AppendEntriesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rf::AppendEntriesRequest* request, ::rf::AppendEntriesResponse* response) { return this->AppendEntries(context, request, response); }));}
    void SetMessageAllocatorFor_AppendEntries(
        ::grpc::experimental::MessageAllocator< ::rf::AppendEntriesRequest, ::rf::AppendEntriesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::rf::AppendEntriesRequest, ::rf::AppendEntriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::rf::AppendEntriesRequest* /*request*/, ::rf::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AppendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::rf::AppendEntriesRequest* /*request*/, ::rf::AppendEntriesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AppendEntries(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rf::AppendEntriesRequest* /*request*/, ::rf::AppendEntriesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Vote() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::rf::RequestVote, ::rf::ResponseVote>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rf::RequestVote* request, ::rf::ResponseVote* response) { return this->Vote(context, request, response); }));}
    void SetMessageAllocatorFor_Vote(
        ::grpc::experimental::MessageAllocator< ::rf::RequestVote, ::rf::ResponseVote>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::rf::RequestVote, ::rf::ResponseVote>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::rf::RequestVote* /*request*/, ::rf::ResponseVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Vote(
      ::grpc::CallbackServerContext* /*context*/, const ::rf::RequestVote* /*request*/, ::rf::ResponseVote* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Vote(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rf::RequestVote* /*request*/, ::rf::ResponseVote* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InstallSnapShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InstallSnapShot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::rf::InstallSnapShotRequest, ::rf::InstallSnapShotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rf::InstallSnapShotRequest* request, ::rf::InstallSnapShotResponse* response) { return this->InstallSnapShot(context, request, response); }));}
    void SetMessageAllocatorFor_InstallSnapShot(
        ::grpc::experimental::MessageAllocator< ::rf::InstallSnapShotRequest, ::rf::InstallSnapShotResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::rf::InstallSnapShotRequest, ::rf::InstallSnapShotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InstallSnapShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapShot(::grpc::ServerContext* /*context*/, const ::rf::InstallSnapShotRequest* /*request*/, ::rf::InstallSnapShotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InstallSnapShot(
      ::grpc::CallbackServerContext* /*context*/, const ::rf::InstallSnapShotRequest* /*request*/, ::rf::InstallSnapShotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InstallSnapShot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rf::InstallSnapShotRequest* /*request*/, ::rf::InstallSnapShotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_AppendEntries<ExperimentalWithCallbackMethod_Vote<ExperimentalWithCallbackMethod_InstallSnapShot<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_AppendEntries<ExperimentalWithCallbackMethod_Vote<ExperimentalWithCallbackMethod_InstallSnapShot<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AppendEntries() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::rf::AppendEntriesRequest* /*request*/, ::rf::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Vote() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::rf::RequestVote* /*request*/, ::rf::ResponseVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InstallSnapShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InstallSnapShot() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InstallSnapShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapShot(::grpc::ServerContext* /*context*/, const ::rf::InstallSnapShotRequest* /*request*/, ::rf::InstallSnapShotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AppendEntries() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::rf::AppendEntriesRequest* /*request*/, ::rf::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Vote() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::rf::RequestVote* /*request*/, ::rf::ResponseVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InstallSnapShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InstallSnapShot() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InstallSnapShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapShot(::grpc::ServerContext* /*context*/, const ::rf::InstallSnapShotRequest* /*request*/, ::rf::InstallSnapShotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallSnapShot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AppendEntries() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AppendEntries(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::rf::AppendEntriesRequest* /*request*/, ::rf::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AppendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AppendEntries(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Vote() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Vote(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::rf::RequestVote* /*request*/, ::rf::ResponseVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Vote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Vote(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InstallSnapShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InstallSnapShot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InstallSnapShot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InstallSnapShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapShot(::grpc::ServerContext* /*context*/, const ::rf::InstallSnapShotRequest* /*request*/, ::rf::InstallSnapShotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InstallSnapShot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InstallSnapShot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AppendEntries() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rf::AppendEntriesRequest, ::rf::AppendEntriesResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::rf::AppendEntriesRequest, ::rf::AppendEntriesResponse>* streamer) {
                       return this->StreamedAppendEntries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::rf::AppendEntriesRequest* /*request*/, ::rf::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendEntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rf::AppendEntriesRequest,::rf::AppendEntriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Vote() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rf::RequestVote, ::rf::ResponseVote>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::rf::RequestVote, ::rf::ResponseVote>* streamer) {
                       return this->StreamedVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::rf::RequestVote* /*request*/, ::rf::ResponseVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rf::RequestVote,::rf::ResponseVote>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InstallSnapShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InstallSnapShot() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rf::InstallSnapShotRequest, ::rf::InstallSnapShotResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::rf::InstallSnapShotRequest, ::rf::InstallSnapShotResponse>* streamer) {
                       return this->StreamedInstallSnapShot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InstallSnapShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InstallSnapShot(::grpc::ServerContext* /*context*/, const ::rf::InstallSnapShotRequest* /*request*/, ::rf::InstallSnapShotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInstallSnapShot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rf::InstallSnapShotRequest,::rf::InstallSnapShotResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_Vote<WithStreamedUnaryMethod_InstallSnapShot<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_Vote<WithStreamedUnaryMethod_InstallSnapShot<Service > > > StreamedService;
};

}  // namespace rf


#endif  // GRPC_raft_2eproto__INCLUDED
