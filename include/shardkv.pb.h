// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shardkv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shardkv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shardkv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shardkv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shardkv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shardkv_2eproto;
namespace shardkv {
class GroupConfig;
class GroupConfigDefaultTypeInternal;
extern GroupConfigDefaultTypeInternal _GroupConfig_default_instance_;
class JoinConfigs;
class JoinConfigsDefaultTypeInternal;
extern JoinConfigsDefaultTypeInternal _JoinConfigs_default_instance_;
class JoinRequest;
class JoinRequestDefaultTypeInternal;
extern JoinRequestDefaultTypeInternal _JoinRequest_default_instance_;
class JoinRequest_GroupsEntry_DoNotUse;
class JoinRequest_GroupsEntry_DoNotUseDefaultTypeInternal;
extern JoinRequest_GroupsEntry_DoNotUseDefaultTypeInternal _JoinRequest_GroupsEntry_DoNotUse_default_instance_;
class JoinResponse;
class JoinResponseDefaultTypeInternal;
extern JoinResponseDefaultTypeInternal _JoinResponse_default_instance_;
class LeaveRequest;
class LeaveRequestDefaultTypeInternal;
extern LeaveRequestDefaultTypeInternal _LeaveRequest_default_instance_;
class LeaveResponse;
class LeaveResponseDefaultTypeInternal;
extern LeaveResponseDefaultTypeInternal _LeaveResponse_default_instance_;
class MoveRequest;
class MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class MoveResponse;
class MoveResponseDefaultTypeInternal;
extern MoveResponseDefaultTypeInternal _MoveResponse_default_instance_;
class QueryRequest;
class QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResponse;
class QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
class QueryResponse_GroupsEntry_DoNotUse;
class QueryResponse_GroupsEntry_DoNotUseDefaultTypeInternal;
extern QueryResponse_GroupsEntry_DoNotUseDefaultTypeInternal _QueryResponse_GroupsEntry_DoNotUse_default_instance_;
}  // namespace shardkv
PROTOBUF_NAMESPACE_OPEN
template<> ::shardkv::GroupConfig* Arena::CreateMaybeMessage<::shardkv::GroupConfig>(Arena*);
template<> ::shardkv::JoinConfigs* Arena::CreateMaybeMessage<::shardkv::JoinConfigs>(Arena*);
template<> ::shardkv::JoinRequest* Arena::CreateMaybeMessage<::shardkv::JoinRequest>(Arena*);
template<> ::shardkv::JoinRequest_GroupsEntry_DoNotUse* Arena::CreateMaybeMessage<::shardkv::JoinRequest_GroupsEntry_DoNotUse>(Arena*);
template<> ::shardkv::JoinResponse* Arena::CreateMaybeMessage<::shardkv::JoinResponse>(Arena*);
template<> ::shardkv::LeaveRequest* Arena::CreateMaybeMessage<::shardkv::LeaveRequest>(Arena*);
template<> ::shardkv::LeaveResponse* Arena::CreateMaybeMessage<::shardkv::LeaveResponse>(Arena*);
template<> ::shardkv::MoveRequest* Arena::CreateMaybeMessage<::shardkv::MoveRequest>(Arena*);
template<> ::shardkv::MoveResponse* Arena::CreateMaybeMessage<::shardkv::MoveResponse>(Arena*);
template<> ::shardkv::QueryRequest* Arena::CreateMaybeMessage<::shardkv::QueryRequest>(Arena*);
template<> ::shardkv::QueryResponse* Arena::CreateMaybeMessage<::shardkv::QueryResponse>(Arena*);
template<> ::shardkv::QueryResponse_GroupsEntry_DoNotUse* Arena::CreateMaybeMessage<::shardkv::QueryResponse_GroupsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace shardkv {

// ===================================================================

class GroupConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shardkv.GroupConfig) */ {
 public:
  inline GroupConfig() : GroupConfig(nullptr) {}
  virtual ~GroupConfig();

  GroupConfig(const GroupConfig& from);
  GroupConfig(GroupConfig&& from) noexcept
    : GroupConfig() {
    *this = ::std::move(from);
  }

  inline GroupConfig& operator=(const GroupConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupConfig& operator=(GroupConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupConfig& default_instance();

  static inline const GroupConfig* internal_default_instance() {
    return reinterpret_cast<const GroupConfig*>(
               &_GroupConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupConfig& a, GroupConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupConfig* New() const final {
    return CreateMaybeMessage<GroupConfig>(nullptr);
  }

  GroupConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupConfig& from);
  void MergeFrom(const GroupConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shardkv.GroupConfig";
  }
  protected:
  explicit GroupConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // bytes ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:shardkv.GroupConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class JoinConfigs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shardkv.JoinConfigs) */ {
 public:
  inline JoinConfigs() : JoinConfigs(nullptr) {}
  virtual ~JoinConfigs();

  JoinConfigs(const JoinConfigs& from);
  JoinConfigs(JoinConfigs&& from) noexcept
    : JoinConfigs() {
    *this = ::std::move(from);
  }

  inline JoinConfigs& operator=(const JoinConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinConfigs& operator=(JoinConfigs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinConfigs& default_instance();

  static inline const JoinConfigs* internal_default_instance() {
    return reinterpret_cast<const JoinConfigs*>(
               &_JoinConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JoinConfigs& a, JoinConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinConfigs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinConfigs* New() const final {
    return CreateMaybeMessage<JoinConfigs>(nullptr);
  }

  JoinConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinConfigs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinConfigs& from);
  void MergeFrom(const JoinConfigs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinConfigs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shardkv.JoinConfigs";
  }
  protected:
  explicit JoinConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // repeated .shardkv.GroupConfig config = 1;
  int config_size() const;
  private:
  int _internal_config_size() const;
  public:
  void clear_config();
  ::shardkv::GroupConfig* mutable_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shardkv::GroupConfig >*
      mutable_config();
  private:
  const ::shardkv::GroupConfig& _internal_config(int index) const;
  ::shardkv::GroupConfig* _internal_add_config();
  public:
  const ::shardkv::GroupConfig& config(int index) const;
  ::shardkv::GroupConfig* add_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shardkv::GroupConfig >&
      config() const;

  // @@protoc_insertion_point(class_scope:shardkv.JoinConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shardkv::GroupConfig > config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class JoinRequest_GroupsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JoinRequest_GroupsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JoinRequest_GroupsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  JoinRequest_GroupsEntry_DoNotUse();
  explicit JoinRequest_GroupsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const JoinRequest_GroupsEntry_DoNotUse& other);
  static const JoinRequest_GroupsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const JoinRequest_GroupsEntry_DoNotUse*>(&_JoinRequest_GroupsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class JoinRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shardkv.JoinRequest) */ {
 public:
  inline JoinRequest() : JoinRequest(nullptr) {}
  virtual ~JoinRequest();

  JoinRequest(const JoinRequest& from);
  JoinRequest(JoinRequest&& from) noexcept
    : JoinRequest() {
    *this = ::std::move(from);
  }

  inline JoinRequest& operator=(const JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRequest& operator=(JoinRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinRequest& default_instance();

  static inline const JoinRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRequest*>(
               &_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JoinRequest& a, JoinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinRequest* New() const final {
    return CreateMaybeMessage<JoinRequest>(nullptr);
  }

  JoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRequest& from);
  void MergeFrom(const JoinRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shardkv.JoinRequest";
  }
  protected:
  explicit JoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kClientIdFieldNumber = 3,
  };
  // map<int32, .shardkv.JoinConfigs> groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >&
      _internal_groups() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >*
      _internal_mutable_groups();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >&
      groups() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >*
      mutable_groups();

  // int32 requestId = 2;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 clientId = 3;
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::int32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientid() const;
  void _internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:shardkv.JoinRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      JoinRequest_GroupsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> groups_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class JoinResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shardkv.JoinResponse) */ {
 public:
  inline JoinResponse() : JoinResponse(nullptr) {}
  virtual ~JoinResponse();

  JoinResponse(const JoinResponse& from);
  JoinResponse(JoinResponse&& from) noexcept
    : JoinResponse() {
    *this = ::std::move(from);
  }

  inline JoinResponse& operator=(const JoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinResponse& operator=(JoinResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinResponse& default_instance();

  static inline const JoinResponse* internal_default_instance() {
    return reinterpret_cast<const JoinResponse*>(
               &_JoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JoinResponse& a, JoinResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinResponse* New() const final {
    return CreateMaybeMessage<JoinResponse>(nullptr);
  }

  JoinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinResponse& from);
  void MergeFrom(const JoinResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shardkv.JoinResponse";
  }
  protected:
  explicit JoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsWrongLeaderFieldNumber = 1,
  };
  // bool isWrongLeader = 1;
  void clear_iswrongleader();
  bool iswrongleader() const;
  void set_iswrongleader(bool value);
  private:
  bool _internal_iswrongleader() const;
  void _internal_set_iswrongleader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:shardkv.JoinResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool iswrongleader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class QueryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shardkv.QueryRequest) */ {
 public:
  inline QueryRequest() : QueryRequest(nullptr) {}
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRequest& default_instance();

  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const final {
    return CreateMaybeMessage<QueryRequest>(nullptr);
  }

  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shardkv.QueryRequest";
  }
  protected:
  explicit QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kClientIdFieldNumber = 3,
  };
  // int32 configId = 1;
  void clear_configid();
  ::PROTOBUF_NAMESPACE_ID::int32 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_configid() const;
  void _internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 requestId = 2;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 clientId = 3;
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::int32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientid() const;
  void _internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:shardkv.QueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 configid_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class QueryResponse_GroupsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResponse_GroupsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResponse_GroupsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  QueryResponse_GroupsEntry_DoNotUse();
  explicit QueryResponse_GroupsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryResponse_GroupsEntry_DoNotUse& other);
  static const QueryResponse_GroupsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryResponse_GroupsEntry_DoNotUse*>(&_QueryResponse_GroupsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class QueryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shardkv.QueryResponse) */ {
 public:
  inline QueryResponse() : QueryResponse(nullptr) {}
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponse& default_instance();

  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const final {
    return CreateMaybeMessage<QueryResponse>(nullptr);
  }

  QueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shardkv.QueryResponse";
  }
  protected:
  explicit QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kShardsFieldNumber = 2,
    kGroupsFieldNumber = 3,
    kConfignumFieldNumber = 1,
    kIsWrongLeaderFieldNumber = 4,
  };
  // repeated int32 shards = 2;
  int shards_size() const;
  private:
  int _internal_shards_size() const;
  public:
  void clear_shards();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shards(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shards() const;
  void _internal_add_shards(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shards();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shards(int index) const;
  void set_shards(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shards(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shards() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shards();

  // map<int32, .shardkv.JoinConfigs> groups = 3;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >&
      _internal_groups() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >*
      _internal_mutable_groups();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >&
      groups() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >*
      mutable_groups();

  // int32 confignum = 1;
  void clear_confignum();
  ::PROTOBUF_NAMESPACE_ID::int32 confignum() const;
  void set_confignum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confignum() const;
  void _internal_set_confignum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isWrongLeader = 4;
  void clear_iswrongleader();
  bool iswrongleader() const;
  void set_iswrongleader(bool value);
  private:
  bool _internal_iswrongleader() const;
  void _internal_set_iswrongleader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:shardkv.QueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shards_;
  mutable std::atomic<int> _shards_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryResponse_GroupsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> groups_;
  ::PROTOBUF_NAMESPACE_ID::int32 confignum_;
  bool iswrongleader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class LeaveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shardkv.LeaveRequest) */ {
 public:
  inline LeaveRequest() : LeaveRequest(nullptr) {}
  virtual ~LeaveRequest();

  LeaveRequest(const LeaveRequest& from);
  LeaveRequest(LeaveRequest&& from) noexcept
    : LeaveRequest() {
    *this = ::std::move(from);
  }

  inline LeaveRequest& operator=(const LeaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveRequest& operator=(LeaveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveRequest& default_instance();

  static inline const LeaveRequest* internal_default_instance() {
    return reinterpret_cast<const LeaveRequest*>(
               &_LeaveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LeaveRequest& a, LeaveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveRequest* New() const final {
    return CreateMaybeMessage<LeaveRequest>(nullptr);
  }

  LeaveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveRequest& from);
  void MergeFrom(const LeaveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shardkv.LeaveRequest";
  }
  protected:
  explicit LeaveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdsFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kClientIdFieldNumber = 3,
  };
  // repeated int32 groupIds = 1;
  int groupids_size() const;
  private:
  int _internal_groupids_size() const;
  public:
  void clear_groupids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groupids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_groupids() const;
  void _internal_add_groupids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_groupids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 groupids(int index) const;
  void set_groupids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_groupids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      groupids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_groupids();

  // int32 requestId = 2;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 clientId = 3;
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::int32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientid() const;
  void _internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:shardkv.LeaveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > groupids_;
  mutable std::atomic<int> _groupids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class LeaveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shardkv.LeaveResponse) */ {
 public:
  inline LeaveResponse() : LeaveResponse(nullptr) {}
  virtual ~LeaveResponse();

  LeaveResponse(const LeaveResponse& from);
  LeaveResponse(LeaveResponse&& from) noexcept
    : LeaveResponse() {
    *this = ::std::move(from);
  }

  inline LeaveResponse& operator=(const LeaveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveResponse& operator=(LeaveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveResponse& default_instance();

  static inline const LeaveResponse* internal_default_instance() {
    return reinterpret_cast<const LeaveResponse*>(
               &_LeaveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LeaveResponse& a, LeaveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveResponse* New() const final {
    return CreateMaybeMessage<LeaveResponse>(nullptr);
  }

  LeaveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveResponse& from);
  void MergeFrom(const LeaveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shardkv.LeaveResponse";
  }
  protected:
  explicit LeaveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsWrongLeaderFieldNumber = 1,
  };
  // bool isWrongLeader = 1;
  void clear_iswrongleader();
  bool iswrongleader() const;
  void set_iswrongleader(bool value);
  private:
  bool _internal_iswrongleader() const;
  void _internal_set_iswrongleader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:shardkv.LeaveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool iswrongleader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class MoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shardkv.MoveRequest) */ {
 public:
  inline MoveRequest() : MoveRequest(nullptr) {}
  virtual ~MoveRequest();

  MoveRequest(const MoveRequest& from);
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveRequest& default_instance();

  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveRequest* New() const final {
    return CreateMaybeMessage<MoveRequest>(nullptr);
  }

  MoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveRequest& from);
  void MergeFrom(const MoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shardkv.MoveRequest";
  }
  protected:
  explicit MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kGidFieldNumber = 2,
    kRequestIdFieldNumber = 3,
    kClientIdFieldNumber = 4,
  };
  // int32 shardId = 1;
  void clear_shardid();
  ::PROTOBUF_NAMESPACE_ID::int32 shardid() const;
  void set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shardid() const;
  void _internal_set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gid = 2;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 requestId = 3;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 clientId = 4;
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::int32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientid() const;
  void _internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:shardkv.MoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 shardid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class MoveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shardkv.MoveResponse) */ {
 public:
  inline MoveResponse() : MoveResponse(nullptr) {}
  virtual ~MoveResponse();

  MoveResponse(const MoveResponse& from);
  MoveResponse(MoveResponse&& from) noexcept
    : MoveResponse() {
    *this = ::std::move(from);
  }

  inline MoveResponse& operator=(const MoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveResponse& operator=(MoveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveResponse& default_instance();

  static inline const MoveResponse* internal_default_instance() {
    return reinterpret_cast<const MoveResponse*>(
               &_MoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MoveResponse& a, MoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveResponse* New() const final {
    return CreateMaybeMessage<MoveResponse>(nullptr);
  }

  MoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveResponse& from);
  void MergeFrom(const MoveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shardkv.MoveResponse";
  }
  protected:
  explicit MoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shardkv_2eproto);
    return ::descriptor_table_shardkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsWrongLeaderFieldNumber = 1,
  };
  // bool isWrongLeader = 1;
  void clear_iswrongleader();
  bool iswrongleader() const;
  void set_iswrongleader(bool value);
  private:
  bool _internal_iswrongleader() const;
  void _internal_set_iswrongleader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:shardkv.MoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool iswrongleader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupConfig

// bytes ip = 1;
inline void GroupConfig::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& GroupConfig::ip() const {
  // @@protoc_insertion_point(field_get:shardkv.GroupConfig.ip)
  return _internal_ip();
}
inline void GroupConfig::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:shardkv.GroupConfig.ip)
}
inline std::string* GroupConfig::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:shardkv.GroupConfig.ip)
  return _internal_mutable_ip();
}
inline const std::string& GroupConfig::_internal_ip() const {
  return ip_.Get();
}
inline void GroupConfig::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GroupConfig::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:shardkv.GroupConfig.ip)
}
inline void GroupConfig::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:shardkv.GroupConfig.ip)
}
inline void GroupConfig::set_ip(const void* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:shardkv.GroupConfig.ip)
}
inline std::string* GroupConfig::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GroupConfig::release_ip() {
  // @@protoc_insertion_point(field_release:shardkv.GroupConfig.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupConfig::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:shardkv.GroupConfig.ip)
}

// int32 port = 2;
inline void GroupConfig::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupConfig::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupConfig::port() const {
  // @@protoc_insertion_point(field_get:shardkv.GroupConfig.port)
  return _internal_port();
}
inline void GroupConfig::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void GroupConfig::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:shardkv.GroupConfig.port)
}

// -------------------------------------------------------------------

// JoinConfigs

// repeated .shardkv.GroupConfig config = 1;
inline int JoinConfigs::_internal_config_size() const {
  return config_.size();
}
inline int JoinConfigs::config_size() const {
  return _internal_config_size();
}
inline void JoinConfigs::clear_config() {
  config_.Clear();
}
inline ::shardkv::GroupConfig* JoinConfigs::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:shardkv.JoinConfigs.config)
  return config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shardkv::GroupConfig >*
JoinConfigs::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:shardkv.JoinConfigs.config)
  return &config_;
}
inline const ::shardkv::GroupConfig& JoinConfigs::_internal_config(int index) const {
  return config_.Get(index);
}
inline const ::shardkv::GroupConfig& JoinConfigs::config(int index) const {
  // @@protoc_insertion_point(field_get:shardkv.JoinConfigs.config)
  return _internal_config(index);
}
inline ::shardkv::GroupConfig* JoinConfigs::_internal_add_config() {
  return config_.Add();
}
inline ::shardkv::GroupConfig* JoinConfigs::add_config() {
  // @@protoc_insertion_point(field_add:shardkv.JoinConfigs.config)
  return _internal_add_config();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shardkv::GroupConfig >&
JoinConfigs::config() const {
  // @@protoc_insertion_point(field_list:shardkv.JoinConfigs.config)
  return config_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// JoinRequest

// map<int32, .shardkv.JoinConfigs> groups = 1;
inline int JoinRequest::_internal_groups_size() const {
  return groups_.size();
}
inline int JoinRequest::groups_size() const {
  return _internal_groups_size();
}
inline void JoinRequest::clear_groups() {
  groups_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >&
JoinRequest::_internal_groups() const {
  return groups_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >&
JoinRequest::groups() const {
  // @@protoc_insertion_point(field_map:shardkv.JoinRequest.groups)
  return _internal_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >*
JoinRequest::_internal_mutable_groups() {
  return groups_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >*
JoinRequest::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_map:shardkv.JoinRequest.groups)
  return _internal_mutable_groups();
}

// int32 requestId = 2;
inline void JoinRequest::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinRequest::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinRequest::requestid() const {
  // @@protoc_insertion_point(field_get:shardkv.JoinRequest.requestId)
  return _internal_requestid();
}
inline void JoinRequest::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void JoinRequest::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:shardkv.JoinRequest.requestId)
}

// int32 clientId = 3;
inline void JoinRequest::clear_clientid() {
  clientid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinRequest::_internal_clientid() const {
  return clientid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinRequest::clientid() const {
  // @@protoc_insertion_point(field_get:shardkv.JoinRequest.clientId)
  return _internal_clientid();
}
inline void JoinRequest::_internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientid_ = value;
}
inline void JoinRequest::set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:shardkv.JoinRequest.clientId)
}

// -------------------------------------------------------------------

// JoinResponse

// bool isWrongLeader = 1;
inline void JoinResponse::clear_iswrongleader() {
  iswrongleader_ = false;
}
inline bool JoinResponse::_internal_iswrongleader() const {
  return iswrongleader_;
}
inline bool JoinResponse::iswrongleader() const {
  // @@protoc_insertion_point(field_get:shardkv.JoinResponse.isWrongLeader)
  return _internal_iswrongleader();
}
inline void JoinResponse::_internal_set_iswrongleader(bool value) {
  
  iswrongleader_ = value;
}
inline void JoinResponse::set_iswrongleader(bool value) {
  _internal_set_iswrongleader(value);
  // @@protoc_insertion_point(field_set:shardkv.JoinResponse.isWrongLeader)
}

// -------------------------------------------------------------------

// QueryRequest

// int32 configId = 1;
inline void QueryRequest::clear_configid() {
  configid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRequest::_internal_configid() const {
  return configid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRequest::configid() const {
  // @@protoc_insertion_point(field_get:shardkv.QueryRequest.configId)
  return _internal_configid();
}
inline void QueryRequest::_internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  configid_ = value;
}
inline void QueryRequest::set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:shardkv.QueryRequest.configId)
}

// int32 requestId = 2;
inline void QueryRequest::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRequest::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRequest::requestid() const {
  // @@protoc_insertion_point(field_get:shardkv.QueryRequest.requestId)
  return _internal_requestid();
}
inline void QueryRequest::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void QueryRequest::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:shardkv.QueryRequest.requestId)
}

// int32 clientId = 3;
inline void QueryRequest::clear_clientid() {
  clientid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRequest::_internal_clientid() const {
  return clientid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRequest::clientid() const {
  // @@protoc_insertion_point(field_get:shardkv.QueryRequest.clientId)
  return _internal_clientid();
}
inline void QueryRequest::_internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientid_ = value;
}
inline void QueryRequest::set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:shardkv.QueryRequest.clientId)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryResponse

// int32 confignum = 1;
inline void QueryResponse::clear_confignum() {
  confignum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResponse::_internal_confignum() const {
  return confignum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResponse::confignum() const {
  // @@protoc_insertion_point(field_get:shardkv.QueryResponse.confignum)
  return _internal_confignum();
}
inline void QueryResponse::_internal_set_confignum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confignum_ = value;
}
inline void QueryResponse::set_confignum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confignum(value);
  // @@protoc_insertion_point(field_set:shardkv.QueryResponse.confignum)
}

// repeated int32 shards = 2;
inline int QueryResponse::_internal_shards_size() const {
  return shards_.size();
}
inline int QueryResponse::shards_size() const {
  return _internal_shards_size();
}
inline void QueryResponse::clear_shards() {
  shards_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResponse::_internal_shards(int index) const {
  return shards_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResponse::shards(int index) const {
  // @@protoc_insertion_point(field_get:shardkv.QueryResponse.shards)
  return _internal_shards(index);
}
inline void QueryResponse::set_shards(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shards_.Set(index, value);
  // @@protoc_insertion_point(field_set:shardkv.QueryResponse.shards)
}
inline void QueryResponse::_internal_add_shards(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shards_.Add(value);
}
inline void QueryResponse::add_shards(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shards(value);
  // @@protoc_insertion_point(field_add:shardkv.QueryResponse.shards)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryResponse::_internal_shards() const {
  return shards_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryResponse::shards() const {
  // @@protoc_insertion_point(field_list:shardkv.QueryResponse.shards)
  return _internal_shards();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryResponse::_internal_mutable_shards() {
  return &shards_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryResponse::mutable_shards() {
  // @@protoc_insertion_point(field_mutable_list:shardkv.QueryResponse.shards)
  return _internal_mutable_shards();
}

// map<int32, .shardkv.JoinConfigs> groups = 3;
inline int QueryResponse::_internal_groups_size() const {
  return groups_.size();
}
inline int QueryResponse::groups_size() const {
  return _internal_groups_size();
}
inline void QueryResponse::clear_groups() {
  groups_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >&
QueryResponse::_internal_groups() const {
  return groups_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >&
QueryResponse::groups() const {
  // @@protoc_insertion_point(field_map:shardkv.QueryResponse.groups)
  return _internal_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >*
QueryResponse::_internal_mutable_groups() {
  return groups_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >*
QueryResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_map:shardkv.QueryResponse.groups)
  return _internal_mutable_groups();
}

// bool isWrongLeader = 4;
inline void QueryResponse::clear_iswrongleader() {
  iswrongleader_ = false;
}
inline bool QueryResponse::_internal_iswrongleader() const {
  return iswrongleader_;
}
inline bool QueryResponse::iswrongleader() const {
  // @@protoc_insertion_point(field_get:shardkv.QueryResponse.isWrongLeader)
  return _internal_iswrongleader();
}
inline void QueryResponse::_internal_set_iswrongleader(bool value) {
  
  iswrongleader_ = value;
}
inline void QueryResponse::set_iswrongleader(bool value) {
  _internal_set_iswrongleader(value);
  // @@protoc_insertion_point(field_set:shardkv.QueryResponse.isWrongLeader)
}

// -------------------------------------------------------------------

// LeaveRequest

// repeated int32 groupIds = 1;
inline int LeaveRequest::_internal_groupids_size() const {
  return groupids_.size();
}
inline int LeaveRequest::groupids_size() const {
  return _internal_groupids_size();
}
inline void LeaveRequest::clear_groupids() {
  groupids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveRequest::_internal_groupids(int index) const {
  return groupids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveRequest::groupids(int index) const {
  // @@protoc_insertion_point(field_get:shardkv.LeaveRequest.groupIds)
  return _internal_groupids(index);
}
inline void LeaveRequest::set_groupids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  groupids_.Set(index, value);
  // @@protoc_insertion_point(field_set:shardkv.LeaveRequest.groupIds)
}
inline void LeaveRequest::_internal_add_groupids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  groupids_.Add(value);
}
inline void LeaveRequest::add_groupids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_groupids(value);
  // @@protoc_insertion_point(field_add:shardkv.LeaveRequest.groupIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LeaveRequest::_internal_groupids() const {
  return groupids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LeaveRequest::groupids() const {
  // @@protoc_insertion_point(field_list:shardkv.LeaveRequest.groupIds)
  return _internal_groupids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LeaveRequest::_internal_mutable_groupids() {
  return &groupids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LeaveRequest::mutable_groupids() {
  // @@protoc_insertion_point(field_mutable_list:shardkv.LeaveRequest.groupIds)
  return _internal_mutable_groupids();
}

// int32 requestId = 2;
inline void LeaveRequest::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveRequest::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveRequest::requestid() const {
  // @@protoc_insertion_point(field_get:shardkv.LeaveRequest.requestId)
  return _internal_requestid();
}
inline void LeaveRequest::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void LeaveRequest::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:shardkv.LeaveRequest.requestId)
}

// int32 clientId = 3;
inline void LeaveRequest::clear_clientid() {
  clientid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveRequest::_internal_clientid() const {
  return clientid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveRequest::clientid() const {
  // @@protoc_insertion_point(field_get:shardkv.LeaveRequest.clientId)
  return _internal_clientid();
}
inline void LeaveRequest::_internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientid_ = value;
}
inline void LeaveRequest::set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:shardkv.LeaveRequest.clientId)
}

// -------------------------------------------------------------------

// LeaveResponse

// bool isWrongLeader = 1;
inline void LeaveResponse::clear_iswrongleader() {
  iswrongleader_ = false;
}
inline bool LeaveResponse::_internal_iswrongleader() const {
  return iswrongleader_;
}
inline bool LeaveResponse::iswrongleader() const {
  // @@protoc_insertion_point(field_get:shardkv.LeaveResponse.isWrongLeader)
  return _internal_iswrongleader();
}
inline void LeaveResponse::_internal_set_iswrongleader(bool value) {
  
  iswrongleader_ = value;
}
inline void LeaveResponse::set_iswrongleader(bool value) {
  _internal_set_iswrongleader(value);
  // @@protoc_insertion_point(field_set:shardkv.LeaveResponse.isWrongLeader)
}

// -------------------------------------------------------------------

// MoveRequest

// int32 shardId = 1;
inline void MoveRequest::clear_shardid() {
  shardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveRequest::_internal_shardid() const {
  return shardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveRequest::shardid() const {
  // @@protoc_insertion_point(field_get:shardkv.MoveRequest.shardId)
  return _internal_shardid();
}
inline void MoveRequest::_internal_set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shardid_ = value;
}
inline void MoveRequest::set_shardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shardid(value);
  // @@protoc_insertion_point(field_set:shardkv.MoveRequest.shardId)
}

// int32 gid = 2;
inline void MoveRequest::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveRequest::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveRequest::gid() const {
  // @@protoc_insertion_point(field_get:shardkv.MoveRequest.gid)
  return _internal_gid();
}
inline void MoveRequest::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void MoveRequest::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:shardkv.MoveRequest.gid)
}

// int32 requestId = 3;
inline void MoveRequest::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveRequest::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveRequest::requestid() const {
  // @@protoc_insertion_point(field_get:shardkv.MoveRequest.requestId)
  return _internal_requestid();
}
inline void MoveRequest::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestid_ = value;
}
inline void MoveRequest::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:shardkv.MoveRequest.requestId)
}

// int32 clientId = 4;
inline void MoveRequest::clear_clientid() {
  clientid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveRequest::_internal_clientid() const {
  return clientid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveRequest::clientid() const {
  // @@protoc_insertion_point(field_get:shardkv.MoveRequest.clientId)
  return _internal_clientid();
}
inline void MoveRequest::_internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientid_ = value;
}
inline void MoveRequest::set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:shardkv.MoveRequest.clientId)
}

// -------------------------------------------------------------------

// MoveResponse

// bool isWrongLeader = 1;
inline void MoveResponse::clear_iswrongleader() {
  iswrongleader_ = false;
}
inline bool MoveResponse::_internal_iswrongleader() const {
  return iswrongleader_;
}
inline bool MoveResponse::iswrongleader() const {
  // @@protoc_insertion_point(field_get:shardkv.MoveResponse.isWrongLeader)
  return _internal_iswrongleader();
}
inline void MoveResponse::_internal_set_iswrongleader(bool value) {
  
  iswrongleader_ = value;
}
inline void MoveResponse::set_iswrongleader(bool value) {
  _internal_set_iswrongleader(value);
  // @@protoc_insertion_point(field_set:shardkv.MoveResponse.isWrongLeader)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace shardkv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shardkv_2eproto
