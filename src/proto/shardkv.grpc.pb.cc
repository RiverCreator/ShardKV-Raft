// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: shardkv.proto

#include "shardkv.pb.h"
#include "shardkv.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace shardkv {

static const char* ShardKVRpc_method_names[] = {
  "/shardkv.ShardKVRpc/Join",
  "/shardkv.ShardKVRpc/Query",
  "/shardkv.ShardKVRpc/Leave",
  "/shardkv.ShardKVRpc/Move",
};

std::unique_ptr< ShardKVRpc::Stub> ShardKVRpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ShardKVRpc::Stub> stub(new ShardKVRpc::Stub(channel));
  return stub;
}

ShardKVRpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Join_(ShardKVRpc_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Query_(ShardKVRpc_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Leave_(ShardKVRpc_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Move_(ShardKVRpc_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ShardKVRpc::Stub::Join(::grpc::ClientContext* context, const ::shardkv::JoinRequest& request, ::shardkv::JoinResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Join_, context, request, response);
}

void ShardKVRpc::Stub::experimental_async::Join(::grpc::ClientContext* context, const ::shardkv::JoinRequest* request, ::shardkv::JoinResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Join_, context, request, response, std::move(f));
}

void ShardKVRpc::Stub::experimental_async::Join(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::shardkv::JoinResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Join_, context, request, response, std::move(f));
}

void ShardKVRpc::Stub::experimental_async::Join(::grpc::ClientContext* context, const ::shardkv::JoinRequest* request, ::shardkv::JoinResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Join_, context, request, response, reactor);
}

void ShardKVRpc::Stub::experimental_async::Join(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::shardkv::JoinResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Join_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shardkv::JoinResponse>* ShardKVRpc::Stub::AsyncJoinRaw(::grpc::ClientContext* context, const ::shardkv::JoinRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::shardkv::JoinResponse>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::shardkv::JoinResponse>* ShardKVRpc::Stub::PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::shardkv::JoinRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::shardkv::JoinResponse>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, false);
}

::grpc::Status ShardKVRpc::Stub::Query(::grpc::ClientContext* context, const ::shardkv::QueryRequest& request, ::shardkv::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Query_, context, request, response);
}

void ShardKVRpc::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::shardkv::QueryRequest* request, ::shardkv::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void ShardKVRpc::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::shardkv::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void ShardKVRpc::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::shardkv::QueryRequest* request, ::shardkv::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

void ShardKVRpc::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::shardkv::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shardkv::QueryResponse>* ShardKVRpc::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::shardkv::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::shardkv::QueryResponse>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::shardkv::QueryResponse>* ShardKVRpc::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::shardkv::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::shardkv::QueryResponse>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, false);
}

::grpc::Status ShardKVRpc::Stub::Leave(::grpc::ClientContext* context, const ::shardkv::LeaveRequest& request, ::shardkv::LeaveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Leave_, context, request, response);
}

void ShardKVRpc::Stub::experimental_async::Leave(::grpc::ClientContext* context, const ::shardkv::LeaveRequest* request, ::shardkv::LeaveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Leave_, context, request, response, std::move(f));
}

void ShardKVRpc::Stub::experimental_async::Leave(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::shardkv::LeaveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Leave_, context, request, response, std::move(f));
}

void ShardKVRpc::Stub::experimental_async::Leave(::grpc::ClientContext* context, const ::shardkv::LeaveRequest* request, ::shardkv::LeaveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Leave_, context, request, response, reactor);
}

void ShardKVRpc::Stub::experimental_async::Leave(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::shardkv::LeaveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Leave_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shardkv::LeaveResponse>* ShardKVRpc::Stub::AsyncLeaveRaw(::grpc::ClientContext* context, const ::shardkv::LeaveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::shardkv::LeaveResponse>::Create(channel_.get(), cq, rpcmethod_Leave_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::shardkv::LeaveResponse>* ShardKVRpc::Stub::PrepareAsyncLeaveRaw(::grpc::ClientContext* context, const ::shardkv::LeaveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::shardkv::LeaveResponse>::Create(channel_.get(), cq, rpcmethod_Leave_, context, request, false);
}

::grpc::Status ShardKVRpc::Stub::Move(::grpc::ClientContext* context, const ::shardkv::MoveRequest& request, ::shardkv::MoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Move_, context, request, response);
}

void ShardKVRpc::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::shardkv::MoveRequest* request, ::shardkv::MoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void ShardKVRpc::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::shardkv::MoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void ShardKVRpc::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::shardkv::MoveRequest* request, ::shardkv::MoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

void ShardKVRpc::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::shardkv::MoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shardkv::MoveResponse>* ShardKVRpc::Stub::AsyncMoveRaw(::grpc::ClientContext* context, const ::shardkv::MoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::shardkv::MoveResponse>::Create(channel_.get(), cq, rpcmethod_Move_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::shardkv::MoveResponse>* ShardKVRpc::Stub::PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::shardkv::MoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::shardkv::MoveResponse>::Create(channel_.get(), cq, rpcmethod_Move_, context, request, false);
}

ShardKVRpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShardKVRpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShardKVRpc::Service, ::shardkv::JoinRequest, ::shardkv::JoinResponse>(
          [](ShardKVRpc::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::shardkv::JoinRequest* req,
             ::shardkv::JoinResponse* resp) {
               return service->Join(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShardKVRpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShardKVRpc::Service, ::shardkv::QueryRequest, ::shardkv::QueryResponse>(
          [](ShardKVRpc::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::shardkv::QueryRequest* req,
             ::shardkv::QueryResponse* resp) {
               return service->Query(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShardKVRpc_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShardKVRpc::Service, ::shardkv::LeaveRequest, ::shardkv::LeaveResponse>(
          [](ShardKVRpc::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::shardkv::LeaveRequest* req,
             ::shardkv::LeaveResponse* resp) {
               return service->Leave(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShardKVRpc_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShardKVRpc::Service, ::shardkv::MoveRequest, ::shardkv::MoveResponse>(
          [](ShardKVRpc::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::shardkv::MoveRequest* req,
             ::shardkv::MoveResponse* resp) {
               return service->Move(ctx, req, resp);
             }, this)));
}

ShardKVRpc::Service::~Service() {
}

::grpc::Status ShardKVRpc::Service::Join(::grpc::ServerContext* context, const ::shardkv::JoinRequest* request, ::shardkv::JoinResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ShardKVRpc::Service::Query(::grpc::ServerContext* context, const ::shardkv::QueryRequest* request, ::shardkv::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ShardKVRpc::Service::Leave(::grpc::ServerContext* context, const ::shardkv::LeaveRequest* request, ::shardkv::LeaveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ShardKVRpc::Service::Move(::grpc::ServerContext* context, const ::shardkv::MoveRequest* request, ::shardkv::MoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace shardkv

