// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft.proto

#include "raft.pb.h"
#include "raft.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rf {

static const char* RaftServerRpc_method_names[] = {
  "/rf.RaftServerRpc/AppendEntries",
  "/rf.RaftServerRpc/Vote",
  "/rf.RaftServerRpc/InstallSnapShot",
};

std::unique_ptr< RaftServerRpc::Stub> RaftServerRpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RaftServerRpc::Stub> stub(new RaftServerRpc::Stub(channel));
  return stub;
}

RaftServerRpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AppendEntries_(RaftServerRpc_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Vote_(RaftServerRpc_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstallSnapShot_(RaftServerRpc_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RaftServerRpc::Stub::AppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::rf::AppendEntriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AppendEntries_, context, request, response);
}

void RaftServerRpc::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest* request, ::rf::AppendEntriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void RaftServerRpc::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::AppendEntriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void RaftServerRpc::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest* request, ::rf::AppendEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, reactor);
}

void RaftServerRpc::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::AppendEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rf::AppendEntriesResponse>* RaftServerRpc::Stub::AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rf::AppendEntriesResponse>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rf::AppendEntriesResponse>* RaftServerRpc::Stub::PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::rf::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rf::AppendEntriesResponse>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, false);
}

::grpc::Status RaftServerRpc::Stub::Vote(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::rf::ResponseVote* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Vote_, context, request, response);
}

void RaftServerRpc::Stub::experimental_async::Vote(::grpc::ClientContext* context, const ::rf::RequestVote* request, ::rf::ResponseVote* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Vote_, context, request, response, std::move(f));
}

void RaftServerRpc::Stub::experimental_async::Vote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::ResponseVote* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Vote_, context, request, response, std::move(f));
}

void RaftServerRpc::Stub::experimental_async::Vote(::grpc::ClientContext* context, const ::rf::RequestVote* request, ::rf::ResponseVote* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Vote_, context, request, response, reactor);
}

void RaftServerRpc::Stub::experimental_async::Vote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::ResponseVote* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Vote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rf::ResponseVote>* RaftServerRpc::Stub::AsyncVoteRaw(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rf::ResponseVote>::Create(channel_.get(), cq, rpcmethod_Vote_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rf::ResponseVote>* RaftServerRpc::Stub::PrepareAsyncVoteRaw(::grpc::ClientContext* context, const ::rf::RequestVote& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rf::ResponseVote>::Create(channel_.get(), cq, rpcmethod_Vote_, context, request, false);
}

::grpc::Status RaftServerRpc::Stub::InstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::rf::InstallSnapShotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InstallSnapShot_, context, request, response);
}

void RaftServerRpc::Stub::experimental_async::InstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest* request, ::rf::InstallSnapShotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InstallSnapShot_, context, request, response, std::move(f));
}

void RaftServerRpc::Stub::experimental_async::InstallSnapShot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::InstallSnapShotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InstallSnapShot_, context, request, response, std::move(f));
}

void RaftServerRpc::Stub::experimental_async::InstallSnapShot(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest* request, ::rf::InstallSnapShotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InstallSnapShot_, context, request, response, reactor);
}

void RaftServerRpc::Stub::experimental_async::InstallSnapShot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rf::InstallSnapShotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InstallSnapShot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rf::InstallSnapShotResponse>* RaftServerRpc::Stub::AsyncInstallSnapShotRaw(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rf::InstallSnapShotResponse>::Create(channel_.get(), cq, rpcmethod_InstallSnapShot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rf::InstallSnapShotResponse>* RaftServerRpc::Stub::PrepareAsyncInstallSnapShotRaw(::grpc::ClientContext* context, const ::rf::InstallSnapShotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rf::InstallSnapShotResponse>::Create(channel_.get(), cq, rpcmethod_InstallSnapShot_, context, request, false);
}

RaftServerRpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftServerRpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftServerRpc::Service, ::rf::AppendEntriesRequest, ::rf::AppendEntriesResponse>(
          [](RaftServerRpc::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rf::AppendEntriesRequest* req,
             ::rf::AppendEntriesResponse* resp) {
               return service->AppendEntries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftServerRpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftServerRpc::Service, ::rf::RequestVote, ::rf::ResponseVote>(
          [](RaftServerRpc::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rf::RequestVote* req,
             ::rf::ResponseVote* resp) {
               return service->Vote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftServerRpc_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftServerRpc::Service, ::rf::InstallSnapShotRequest, ::rf::InstallSnapShotResponse>(
          [](RaftServerRpc::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rf::InstallSnapShotRequest* req,
             ::rf::InstallSnapShotResponse* resp) {
               return service->InstallSnapShot(ctx, req, resp);
             }, this)));
}

RaftServerRpc::Service::~Service() {
}

::grpc::Status RaftServerRpc::Service::AppendEntries(::grpc::ServerContext* context, const ::rf::AppendEntriesRequest* request, ::rf::AppendEntriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftServerRpc::Service::Vote(::grpc::ServerContext* context, const ::rf::RequestVote* request, ::rf::ResponseVote* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftServerRpc::Service::InstallSnapShot(::grpc::ServerContext* context, const ::rf::InstallSnapShotRequest* request, ::rf::InstallSnapShotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rf

