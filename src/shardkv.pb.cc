// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shardkv.proto

#include "shardkv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_shardkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupConfig_shardkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shardkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinConfigs_shardkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shardkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinRequest_GroupsEntry_DoNotUse_shardkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shardkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponse_GroupsEntry_DoNotUse_shardkv_2eproto;
namespace shardkv {
class GroupConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupConfig> _instance;
} _GroupConfig_default_instance_;
class JoinConfigsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinConfigs> _instance;
} _JoinConfigs_default_instance_;
class JoinRequest_GroupsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinRequest_GroupsEntry_DoNotUse> _instance;
} _JoinRequest_GroupsEntry_DoNotUse_default_instance_;
class JoinRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinRequest> _instance;
} _JoinRequest_default_instance_;
class JoinResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinResponse> _instance;
} _JoinResponse_default_instance_;
class QueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryRequest> _instance;
} _QueryRequest_default_instance_;
class QueryResponse_GroupsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponse_GroupsEntry_DoNotUse> _instance;
} _QueryResponse_GroupsEntry_DoNotUse_default_instance_;
class QueryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponse> _instance;
} _QueryResponse_default_instance_;
class LeaveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaveRequest> _instance;
} _LeaveRequest_default_instance_;
class LeaveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaveResponse> _instance;
} _LeaveResponse_default_instance_;
class MoveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveRequest> _instance;
} _MoveRequest_default_instance_;
class MoveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveResponse> _instance;
} _MoveResponse_default_instance_;
}  // namespace shardkv
static void InitDefaultsscc_info_GroupConfig_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_GroupConfig_default_instance_;
    new (ptr) ::shardkv::GroupConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupConfig_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupConfig_shardkv_2eproto}, {}};

static void InitDefaultsscc_info_JoinConfigs_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_JoinConfigs_default_instance_;
    new (ptr) ::shardkv::JoinConfigs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinConfigs_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JoinConfigs_shardkv_2eproto}, {
      &scc_info_GroupConfig_shardkv_2eproto.base,}};

static void InitDefaultsscc_info_JoinRequest_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_JoinRequest_default_instance_;
    new (ptr) ::shardkv::JoinRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinRequest_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JoinRequest_shardkv_2eproto}, {
      &scc_info_JoinRequest_GroupsEntry_DoNotUse_shardkv_2eproto.base,}};

static void InitDefaultsscc_info_JoinRequest_GroupsEntry_DoNotUse_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_JoinRequest_GroupsEntry_DoNotUse_default_instance_;
    new (ptr) ::shardkv::JoinRequest_GroupsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinRequest_GroupsEntry_DoNotUse_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JoinRequest_GroupsEntry_DoNotUse_shardkv_2eproto}, {
      &scc_info_JoinConfigs_shardkv_2eproto.base,}};

static void InitDefaultsscc_info_JoinResponse_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_JoinResponse_default_instance_;
    new (ptr) ::shardkv::JoinResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinResponse_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinResponse_shardkv_2eproto}, {}};

static void InitDefaultsscc_info_LeaveRequest_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_LeaveRequest_default_instance_;
    new (ptr) ::shardkv::LeaveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaveRequest_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaveRequest_shardkv_2eproto}, {}};

static void InitDefaultsscc_info_LeaveResponse_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_LeaveResponse_default_instance_;
    new (ptr) ::shardkv::LeaveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaveResponse_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaveResponse_shardkv_2eproto}, {}};

static void InitDefaultsscc_info_MoveRequest_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_MoveRequest_default_instance_;
    new (ptr) ::shardkv::MoveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveRequest_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveRequest_shardkv_2eproto}, {}};

static void InitDefaultsscc_info_MoveResponse_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_MoveResponse_default_instance_;
    new (ptr) ::shardkv::MoveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveResponse_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveResponse_shardkv_2eproto}, {}};

static void InitDefaultsscc_info_QueryRequest_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_QueryRequest_default_instance_;
    new (ptr) ::shardkv::QueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryRequest_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryRequest_shardkv_2eproto}, {}};

static void InitDefaultsscc_info_QueryResponse_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_QueryResponse_default_instance_;
    new (ptr) ::shardkv::QueryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponse_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResponse_shardkv_2eproto}, {
      &scc_info_QueryResponse_GroupsEntry_DoNotUse_shardkv_2eproto.base,}};

static void InitDefaultsscc_info_QueryResponse_GroupsEntry_DoNotUse_shardkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shardkv::_QueryResponse_GroupsEntry_DoNotUse_default_instance_;
    new (ptr) ::shardkv::QueryResponse_GroupsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponse_GroupsEntry_DoNotUse_shardkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResponse_GroupsEntry_DoNotUse_shardkv_2eproto}, {
      &scc_info_JoinConfigs_shardkv_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_shardkv_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_shardkv_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_shardkv_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_shardkv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shardkv::GroupConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::GroupConfig, ip_),
  PROTOBUF_FIELD_OFFSET(::shardkv::GroupConfig, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinConfigs, config_),
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinRequest_GroupsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinRequest_GroupsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinRequest_GroupsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinRequest_GroupsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinRequest, groups_),
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinRequest, requestid_),
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinRequest, clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::JoinResponse, iswrongleader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryRequest, configid_),
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryRequest, requestid_),
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryRequest, clientid_),
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryResponse_GroupsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryResponse_GroupsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryResponse_GroupsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryResponse_GroupsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryResponse, confignum_),
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryResponse, shards_),
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryResponse, groups_),
  PROTOBUF_FIELD_OFFSET(::shardkv::QueryResponse, iswrongleader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shardkv::LeaveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::LeaveRequest, groupids_),
  PROTOBUF_FIELD_OFFSET(::shardkv::LeaveRequest, requestid_),
  PROTOBUF_FIELD_OFFSET(::shardkv::LeaveRequest, clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shardkv::LeaveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::LeaveResponse, iswrongleader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shardkv::MoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::MoveRequest, shardid_),
  PROTOBUF_FIELD_OFFSET(::shardkv::MoveRequest, gid_),
  PROTOBUF_FIELD_OFFSET(::shardkv::MoveRequest, requestid_),
  PROTOBUF_FIELD_OFFSET(::shardkv::MoveRequest, clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shardkv::MoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shardkv::MoveResponse, iswrongleader_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::shardkv::GroupConfig)},
  { 7, -1, sizeof(::shardkv::JoinConfigs)},
  { 13, 20, sizeof(::shardkv::JoinRequest_GroupsEntry_DoNotUse)},
  { 22, -1, sizeof(::shardkv::JoinRequest)},
  { 30, -1, sizeof(::shardkv::JoinResponse)},
  { 36, -1, sizeof(::shardkv::QueryRequest)},
  { 44, 51, sizeof(::shardkv::QueryResponse_GroupsEntry_DoNotUse)},
  { 53, -1, sizeof(::shardkv::QueryResponse)},
  { 62, -1, sizeof(::shardkv::LeaveRequest)},
  { 70, -1, sizeof(::shardkv::LeaveResponse)},
  { 76, -1, sizeof(::shardkv::MoveRequest)},
  { 85, -1, sizeof(::shardkv::MoveResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_GroupConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_JoinConfigs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_JoinRequest_GroupsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_JoinRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_JoinResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_QueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_QueryResponse_GroupsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_QueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_LeaveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_LeaveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_MoveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shardkv::_MoveResponse_default_instance_),
};

const char descriptor_table_protodef_shardkv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rshardkv.proto\022\007shardkv\"\'\n\013GroupConfig\022"
  "\n\n\002ip\030\001 \001(\014\022\014\n\004port\030\002 \001(\005\"3\n\013JoinConfigs"
  "\022$\n\006config\030\001 \003(\0132\024.shardkv.GroupConfig\"\251"
  "\001\n\013JoinRequest\0220\n\006groups\030\001 \003(\0132 .shardkv"
  ".JoinRequest.GroupsEntry\022\021\n\trequestId\030\002 "
  "\001(\005\022\020\n\010clientId\030\003 \001(\005\032C\n\013GroupsEntry\022\013\n\003"
  "key\030\001 \001(\005\022#\n\005value\030\002 \001(\0132\024.shardkv.JoinC"
  "onfigs:\0028\001\"%\n\014JoinResponse\022\025\n\risWrongLea"
  "der\030\001 \001(\010\"E\n\014QueryRequest\022\020\n\010configId\030\001 "
  "\001(\005\022\021\n\trequestId\030\002 \001(\005\022\020\n\010clientId\030\003 \001(\005"
  "\"\302\001\n\rQueryResponse\022\021\n\tconfignum\030\001 \001(\005\022\016\n"
  "\006shards\030\002 \003(\005\0222\n\006groups\030\003 \003(\0132\".shardkv."
  "QueryResponse.GroupsEntry\022\025\n\risWrongLead"
  "er\030\004 \001(\010\032C\n\013GroupsEntry\022\013\n\003key\030\001 \001(\005\022#\n\005"
  "value\030\002 \001(\0132\024.shardkv.JoinConfigs:\0028\001\"E\n"
  "\014LeaveRequest\022\020\n\010groupIds\030\001 \003(\005\022\021\n\treque"
  "stId\030\002 \001(\005\022\020\n\010clientId\030\003 \001(\005\"&\n\rLeaveRes"
  "ponse\022\025\n\risWrongLeader\030\001 \001(\010\"P\n\013MoveRequ"
  "est\022\017\n\007shardId\030\001 \001(\005\022\013\n\003gid\030\002 \001(\005\022\021\n\treq"
  "uestId\030\003 \001(\005\022\020\n\010clientId\030\004 \001(\005\"%\n\014MoveRe"
  "sponse\022\025\n\risWrongLeader\030\001 \001(\0102\346\001\n\nShardK"
  "VRpc\0223\n\004Join\022\024.shardkv.JoinRequest\032\025.sha"
  "rdkv.JoinResponse\0226\n\005Query\022\025.shardkv.Que"
  "ryRequest\032\026.shardkv.QueryResponse\0226\n\005Lea"
  "ve\022\025.shardkv.LeaveRequest\032\026.shardkv.Leav"
  "eResponse\0223\n\004Move\022\024.shardkv.MoveRequest\032"
  "\025.shardkv.MoveResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_shardkv_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_shardkv_2eproto_sccs[12] = {
  &scc_info_GroupConfig_shardkv_2eproto.base,
  &scc_info_JoinConfigs_shardkv_2eproto.base,
  &scc_info_JoinRequest_shardkv_2eproto.base,
  &scc_info_JoinRequest_GroupsEntry_DoNotUse_shardkv_2eproto.base,
  &scc_info_JoinResponse_shardkv_2eproto.base,
  &scc_info_LeaveRequest_shardkv_2eproto.base,
  &scc_info_LeaveResponse_shardkv_2eproto.base,
  &scc_info_MoveRequest_shardkv_2eproto.base,
  &scc_info_MoveResponse_shardkv_2eproto.base,
  &scc_info_QueryRequest_shardkv_2eproto.base,
  &scc_info_QueryResponse_shardkv_2eproto.base,
  &scc_info_QueryResponse_GroupsEntry_DoNotUse_shardkv_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_shardkv_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shardkv_2eproto = {
  false, false, descriptor_table_protodef_shardkv_2eproto, "shardkv.proto", 1070,
  &descriptor_table_shardkv_2eproto_once, descriptor_table_shardkv_2eproto_sccs, descriptor_table_shardkv_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_shardkv_2eproto::offsets,
  file_level_metadata_shardkv_2eproto, 12, file_level_enum_descriptors_shardkv_2eproto, file_level_service_descriptors_shardkv_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_shardkv_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_shardkv_2eproto)), true);
namespace shardkv {

// ===================================================================

class GroupConfig::_Internal {
 public:
};

GroupConfig::GroupConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shardkv.GroupConfig)
}
GroupConfig::GroupConfig(const GroupConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:shardkv.GroupConfig)
}

void GroupConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupConfig_shardkv_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

GroupConfig::~GroupConfig() {
  // @@protoc_insertion_point(destructor:shardkv.GroupConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupConfig::ArenaDtor(void* object) {
  GroupConfig* _this = reinterpret_cast< GroupConfig* >(object);
  (void)_this;
}
void GroupConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupConfig& GroupConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupConfig_shardkv_2eproto.base);
  return *internal_default_instance();
}


void GroupConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shardkv.GroupConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shardkv.GroupConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ip = 1;
  if (this->ip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shardkv.GroupConfig)
  return target;
}

size_t GroupConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shardkv.GroupConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shardkv.GroupConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shardkv.GroupConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shardkv.GroupConfig)
    MergeFrom(*source);
  }
}

void GroupConfig::MergeFrom(const GroupConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shardkv.GroupConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void GroupConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shardkv.GroupConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupConfig::CopyFrom(const GroupConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shardkv.GroupConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupConfig::IsInitialized() const {
  return true;
}

void GroupConfig::InternalSwap(GroupConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JoinConfigs::_Internal {
 public:
};

JoinConfigs::JoinConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shardkv.JoinConfigs)
}
JoinConfigs::JoinConfigs(const JoinConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_(from.config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:shardkv.JoinConfigs)
}

void JoinConfigs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinConfigs_shardkv_2eproto.base);
}

JoinConfigs::~JoinConfigs() {
  // @@protoc_insertion_point(destructor:shardkv.JoinConfigs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JoinConfigs::ArenaDtor(void* object) {
  JoinConfigs* _this = reinterpret_cast< JoinConfigs* >(object);
  (void)_this;
}
void JoinConfigs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinConfigs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinConfigs& JoinConfigs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinConfigs_shardkv_2eproto.base);
  return *internal_default_instance();
}


void JoinConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:shardkv.JoinConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinConfigs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .shardkv.GroupConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinConfigs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shardkv.JoinConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .shardkv.GroupConfig config = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shardkv.JoinConfigs)
  return target;
}

size_t JoinConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shardkv.JoinConfigs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shardkv.GroupConfig config = 1;
  total_size += 1UL * this->_internal_config_size();
  for (const auto& msg : this->config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinConfigs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shardkv.JoinConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinConfigs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinConfigs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shardkv.JoinConfigs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shardkv.JoinConfigs)
    MergeFrom(*source);
  }
}

void JoinConfigs::MergeFrom(const JoinConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shardkv.JoinConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
}

void JoinConfigs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shardkv.JoinConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinConfigs::CopyFrom(const JoinConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shardkv.JoinConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinConfigs::IsInitialized() const {
  return true;
}

void JoinConfigs::InternalSwap(JoinConfigs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_.InternalSwap(&other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinConfigs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

JoinRequest_GroupsEntry_DoNotUse::JoinRequest_GroupsEntry_DoNotUse() {}
JoinRequest_GroupsEntry_DoNotUse::JoinRequest_GroupsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void JoinRequest_GroupsEntry_DoNotUse::MergeFrom(const JoinRequest_GroupsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata JoinRequest_GroupsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void JoinRequest_GroupsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class JoinRequest::_Internal {
 public:
};

JoinRequest::JoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shardkv.JoinRequest)
}
JoinRequest::JoinRequest(const JoinRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groups_.MergeFrom(from.groups_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(clientid_));
  // @@protoc_insertion_point(copy_constructor:shardkv.JoinRequest)
}

void JoinRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinRequest_shardkv_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(clientid_));
}

JoinRequest::~JoinRequest() {
  // @@protoc_insertion_point(destructor:shardkv.JoinRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JoinRequest::ArenaDtor(void* object) {
  JoinRequest* _this = reinterpret_cast< JoinRequest* >(object);
  (void)_this;
}
void JoinRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinRequest& JoinRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinRequest_shardkv_2eproto.base);
  return *internal_default_instance();
}


void JoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:shardkv.JoinRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(clientid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .shardkv.JoinConfigs> groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&groups_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 requestId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clientId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shardkv.JoinRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .shardkv.JoinConfigs> groups = 1;
  if (!this->_internal_groups().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_groups().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_groups().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >::const_iterator
          it = this->_internal_groups().begin();
          it != this->_internal_groups().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = JoinRequest_GroupsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >::const_iterator
          it = this->_internal_groups().begin();
          it != this->_internal_groups().end(); ++it) {
        target = JoinRequest_GroupsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // int32 requestId = 2;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_requestid(), target);
  }

  // int32 clientId = 3;
  if (this->clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shardkv.JoinRequest)
  return target;
}

size_t JoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shardkv.JoinRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .shardkv.JoinConfigs> groups = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_groups_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >::const_iterator
      it = this->_internal_groups().begin();
      it != this->_internal_groups().end(); ++it) {
    total_size += JoinRequest_GroupsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 requestId = 2;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_requestid());
  }

  // int32 clientId = 3;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clientid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shardkv.JoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shardkv.JoinRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shardkv.JoinRequest)
    MergeFrom(*source);
  }
}

void JoinRequest::MergeFrom(const JoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shardkv.JoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.clientid() != 0) {
    _internal_set_clientid(from._internal_clientid());
  }
}

void JoinRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shardkv.JoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRequest::CopyFrom(const JoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shardkv.JoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRequest::IsInitialized() const {
  return true;
}

void JoinRequest::InternalSwap(JoinRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  groups_.Swap(&other->groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinRequest, clientid_)
      + sizeof(JoinRequest::clientid_)
      - PROTOBUF_FIELD_OFFSET(JoinRequest, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JoinResponse::_Internal {
 public:
};

JoinResponse::JoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shardkv.JoinResponse)
}
JoinResponse::JoinResponse(const JoinResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iswrongleader_ = from.iswrongleader_;
  // @@protoc_insertion_point(copy_constructor:shardkv.JoinResponse)
}

void JoinResponse::SharedCtor() {
  iswrongleader_ = false;
}

JoinResponse::~JoinResponse() {
  // @@protoc_insertion_point(destructor:shardkv.JoinResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JoinResponse::ArenaDtor(void* object) {
  JoinResponse* _this = reinterpret_cast< JoinResponse* >(object);
  (void)_this;
}
void JoinResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinResponse& JoinResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinResponse_shardkv_2eproto.base);
  return *internal_default_instance();
}


void JoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:shardkv.JoinResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iswrongleader_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isWrongLeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iswrongleader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shardkv.JoinResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isWrongLeader = 1;
  if (this->iswrongleader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_iswrongleader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shardkv.JoinResponse)
  return target;
}

size_t JoinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shardkv.JoinResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isWrongLeader = 1;
  if (this->iswrongleader() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shardkv.JoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shardkv.JoinResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shardkv.JoinResponse)
    MergeFrom(*source);
  }
}

void JoinResponse::MergeFrom(const JoinResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shardkv.JoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iswrongleader() != 0) {
    _internal_set_iswrongleader(from._internal_iswrongleader());
  }
}

void JoinResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shardkv.JoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinResponse::CopyFrom(const JoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shardkv.JoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinResponse::IsInitialized() const {
  return true;
}

void JoinResponse::InternalSwap(JoinResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(iswrongleader_, other->iswrongleader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryRequest::_Internal {
 public:
};

QueryRequest::QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shardkv.QueryRequest)
}
QueryRequest::QueryRequest(const QueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&configid_, &from.configid_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&configid_)) + sizeof(clientid_));
  // @@protoc_insertion_point(copy_constructor:shardkv.QueryRequest)
}

void QueryRequest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&configid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&configid_)) + sizeof(clientid_));
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:shardkv.QueryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryRequest::ArenaDtor(void* object) {
  QueryRequest* _this = reinterpret_cast< QueryRequest* >(object);
  (void)_this;
}
void QueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryRequest& QueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryRequest_shardkv_2eproto.base);
  return *internal_default_instance();
}


void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:shardkv.QueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&configid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&configid_)) + sizeof(clientid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 configId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          configid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 requestId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clientId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shardkv.QueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 configId = 1;
  if (this->configid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_configid(), target);
  }

  // int32 requestId = 2;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_requestid(), target);
  }

  // int32 clientId = 3;
  if (this->clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shardkv.QueryRequest)
  return target;
}

size_t QueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shardkv.QueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 configId = 1;
  if (this->configid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_configid());
  }

  // int32 requestId = 2;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_requestid());
  }

  // int32 clientId = 3;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clientid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shardkv.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shardkv.QueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shardkv.QueryRequest)
    MergeFrom(*source);
  }
}

void QueryRequest::MergeFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shardkv.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.configid() != 0) {
    _internal_set_configid(from._internal_configid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.clientid() != 0) {
    _internal_set_clientid(from._internal_clientid());
  }
}

void QueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shardkv.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shardkv.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  return true;
}

void QueryRequest::InternalSwap(QueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryRequest, clientid_)
      + sizeof(QueryRequest::clientid_)
      - PROTOBUF_FIELD_OFFSET(QueryRequest, configid_)>(
          reinterpret_cast<char*>(&configid_),
          reinterpret_cast<char*>(&other->configid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

QueryResponse_GroupsEntry_DoNotUse::QueryResponse_GroupsEntry_DoNotUse() {}
QueryResponse_GroupsEntry_DoNotUse::QueryResponse_GroupsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryResponse_GroupsEntry_DoNotUse::MergeFrom(const QueryResponse_GroupsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryResponse_GroupsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QueryResponse_GroupsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class QueryResponse::_Internal {
 public:
};

QueryResponse::QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shards_(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shardkv.QueryResponse)
}
QueryResponse::QueryResponse(const QueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shards_(from.shards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groups_.MergeFrom(from.groups_);
  ::memcpy(&confignum_, &from.confignum_,
    static_cast<size_t>(reinterpret_cast<char*>(&iswrongleader_) -
    reinterpret_cast<char*>(&confignum_)) + sizeof(iswrongleader_));
  // @@protoc_insertion_point(copy_constructor:shardkv.QueryResponse)
}

void QueryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResponse_shardkv_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&confignum_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&iswrongleader_) -
      reinterpret_cast<char*>(&confignum_)) + sizeof(iswrongleader_));
}

QueryResponse::~QueryResponse() {
  // @@protoc_insertion_point(destructor:shardkv.QueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryResponse::ArenaDtor(void* object) {
  QueryResponse* _this = reinterpret_cast< QueryResponse* >(object);
  (void)_this;
}
void QueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponse& QueryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponse_shardkv_2eproto.base);
  return *internal_default_instance();
}


void QueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:shardkv.QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shards_.Clear();
  groups_.Clear();
  ::memset(&confignum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswrongleader_) -
      reinterpret_cast<char*>(&confignum_)) + sizeof(iswrongleader_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confignum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confignum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 shards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_shards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .shardkv.JoinConfigs> groups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&groups_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool isWrongLeader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          iswrongleader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shardkv.QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confignum = 1;
  if (this->confignum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confignum(), target);
  }

  // repeated int32 shards = 2;
  {
    int byte_size = _shards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_shards(), byte_size, target);
    }
  }

  // map<int32, .shardkv.JoinConfigs> groups = 3;
  if (!this->_internal_groups().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_groups().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_groups().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >::const_iterator
          it = this->_internal_groups().begin();
          it != this->_internal_groups().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryResponse_GroupsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >::const_iterator
          it = this->_internal_groups().begin();
          it != this->_internal_groups().end(); ++it) {
        target = QueryResponse_GroupsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // bool isWrongLeader = 4;
  if (this->iswrongleader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_iswrongleader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shardkv.QueryResponse)
  return target;
}

size_t QueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shardkv.QueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shards = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shards_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, .shardkv.JoinConfigs> groups = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_groups_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::shardkv::JoinConfigs >::const_iterator
      it = this->_internal_groups().begin();
      it != this->_internal_groups().end(); ++it) {
    total_size += QueryResponse_GroupsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 confignum = 1;
  if (this->confignum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confignum());
  }

  // bool isWrongLeader = 4;
  if (this->iswrongleader() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shardkv.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shardkv.QueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shardkv.QueryResponse)
    MergeFrom(*source);
  }
}

void QueryResponse::MergeFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shardkv.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shards_.MergeFrom(from.shards_);
  groups_.MergeFrom(from.groups_);
  if (from.confignum() != 0) {
    _internal_set_confignum(from._internal_confignum());
  }
  if (from.iswrongleader() != 0) {
    _internal_set_iswrongleader(from._internal_iswrongleader());
  }
}

void QueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shardkv.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponse::CopyFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shardkv.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponse::IsInitialized() const {
  return true;
}

void QueryResponse::InternalSwap(QueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shards_.InternalSwap(&other->shards_);
  groups_.Swap(&other->groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryResponse, iswrongleader_)
      + sizeof(QueryResponse::iswrongleader_)
      - PROTOBUF_FIELD_OFFSET(QueryResponse, confignum_)>(
          reinterpret_cast<char*>(&confignum_),
          reinterpret_cast<char*>(&other->confignum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LeaveRequest::_Internal {
 public:
};

LeaveRequest::LeaveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groupids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shardkv.LeaveRequest)
}
LeaveRequest::LeaveRequest(const LeaveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groupids_(from.groupids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(clientid_));
  // @@protoc_insertion_point(copy_constructor:shardkv.LeaveRequest)
}

void LeaveRequest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(clientid_));
}

LeaveRequest::~LeaveRequest() {
  // @@protoc_insertion_point(destructor:shardkv.LeaveRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LeaveRequest::ArenaDtor(void* object) {
  LeaveRequest* _this = reinterpret_cast< LeaveRequest* >(object);
  (void)_this;
}
void LeaveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveRequest& LeaveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaveRequest_shardkv_2eproto.base);
  return *internal_default_instance();
}


void LeaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:shardkv.LeaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupids_.Clear();
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(clientid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 groupIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_groupids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_groupids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 requestId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clientId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shardkv.LeaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 groupIds = 1;
  {
    int byte_size = _groupids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_groupids(), byte_size, target);
    }
  }

  // int32 requestId = 2;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_requestid(), target);
  }

  // int32 clientId = 3;
  if (this->clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shardkv.LeaveRequest)
  return target;
}

size_t LeaveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shardkv.LeaveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 groupIds = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->groupids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _groupids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 requestId = 2;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_requestid());
  }

  // int32 clientId = 3;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clientid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shardkv.LeaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shardkv.LeaveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shardkv.LeaveRequest)
    MergeFrom(*source);
  }
}

void LeaveRequest::MergeFrom(const LeaveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shardkv.LeaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groupids_.MergeFrom(from.groupids_);
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.clientid() != 0) {
    _internal_set_clientid(from._internal_clientid());
  }
}

void LeaveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shardkv.LeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRequest::CopyFrom(const LeaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shardkv.LeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRequest::IsInitialized() const {
  return true;
}

void LeaveRequest::InternalSwap(LeaveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  groupids_.InternalSwap(&other->groupids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveRequest, clientid_)
      + sizeof(LeaveRequest::clientid_)
      - PROTOBUF_FIELD_OFFSET(LeaveRequest, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LeaveResponse::_Internal {
 public:
};

LeaveResponse::LeaveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shardkv.LeaveResponse)
}
LeaveResponse::LeaveResponse(const LeaveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iswrongleader_ = from.iswrongleader_;
  // @@protoc_insertion_point(copy_constructor:shardkv.LeaveResponse)
}

void LeaveResponse::SharedCtor() {
  iswrongleader_ = false;
}

LeaveResponse::~LeaveResponse() {
  // @@protoc_insertion_point(destructor:shardkv.LeaveResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LeaveResponse::ArenaDtor(void* object) {
  LeaveResponse* _this = reinterpret_cast< LeaveResponse* >(object);
  (void)_this;
}
void LeaveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveResponse& LeaveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaveResponse_shardkv_2eproto.base);
  return *internal_default_instance();
}


void LeaveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:shardkv.LeaveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iswrongleader_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isWrongLeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iswrongleader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shardkv.LeaveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isWrongLeader = 1;
  if (this->iswrongleader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_iswrongleader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shardkv.LeaveResponse)
  return target;
}

size_t LeaveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shardkv.LeaveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isWrongLeader = 1;
  if (this->iswrongleader() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shardkv.LeaveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shardkv.LeaveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shardkv.LeaveResponse)
    MergeFrom(*source);
  }
}

void LeaveResponse::MergeFrom(const LeaveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shardkv.LeaveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iswrongleader() != 0) {
    _internal_set_iswrongleader(from._internal_iswrongleader());
  }
}

void LeaveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shardkv.LeaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveResponse::CopyFrom(const LeaveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shardkv.LeaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveResponse::IsInitialized() const {
  return true;
}

void LeaveResponse::InternalSwap(LeaveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(iswrongleader_, other->iswrongleader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MoveRequest::_Internal {
 public:
};

MoveRequest::MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shardkv.MoveRequest)
}
MoveRequest::MoveRequest(const MoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shardid_, &from.shardid_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&shardid_)) + sizeof(clientid_));
  // @@protoc_insertion_point(copy_constructor:shardkv.MoveRequest)
}

void MoveRequest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&shardid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&shardid_)) + sizeof(clientid_));
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:shardkv.MoveRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveRequest::ArenaDtor(void* object) {
  MoveRequest* _this = reinterpret_cast< MoveRequest* >(object);
  (void)_this;
}
void MoveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveRequest& MoveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveRequest_shardkv_2eproto.base);
  return *internal_default_instance();
}


void MoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:shardkv.MoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientid_) -
      reinterpret_cast<char*>(&shardid_)) + sizeof(clientid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 shardId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 requestId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clientId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shardkv.MoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shardId = 1;
  if (this->shardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shardid(), target);
  }

  // int32 gid = 2;
  if (this->gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gid(), target);
  }

  // int32 requestId = 3;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_requestid(), target);
  }

  // int32 clientId = 4;
  if (this->clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shardkv.MoveRequest)
  return target;
}

size_t MoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shardkv.MoveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 shardId = 1;
  if (this->shardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shardid());
  }

  // int32 gid = 2;
  if (this->gid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gid());
  }

  // int32 requestId = 3;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_requestid());
  }

  // int32 clientId = 4;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clientid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shardkv.MoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shardkv.MoveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shardkv.MoveRequest)
    MergeFrom(*source);
  }
}

void MoveRequest::MergeFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shardkv.MoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shardid() != 0) {
    _internal_set_shardid(from._internal_shardid());
  }
  if (from.gid() != 0) {
    _internal_set_gid(from._internal_gid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.clientid() != 0) {
    _internal_set_clientid(from._internal_clientid());
  }
}

void MoveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shardkv.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shardkv.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  return true;
}

void MoveRequest::InternalSwap(MoveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRequest, clientid_)
      + sizeof(MoveRequest::clientid_)
      - PROTOBUF_FIELD_OFFSET(MoveRequest, shardid_)>(
          reinterpret_cast<char*>(&shardid_),
          reinterpret_cast<char*>(&other->shardid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MoveResponse::_Internal {
 public:
};

MoveResponse::MoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shardkv.MoveResponse)
}
MoveResponse::MoveResponse(const MoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iswrongleader_ = from.iswrongleader_;
  // @@protoc_insertion_point(copy_constructor:shardkv.MoveResponse)
}

void MoveResponse::SharedCtor() {
  iswrongleader_ = false;
}

MoveResponse::~MoveResponse() {
  // @@protoc_insertion_point(destructor:shardkv.MoveResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveResponse::ArenaDtor(void* object) {
  MoveResponse* _this = reinterpret_cast< MoveResponse* >(object);
  (void)_this;
}
void MoveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveResponse& MoveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveResponse_shardkv_2eproto.base);
  return *internal_default_instance();
}


void MoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:shardkv.MoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iswrongleader_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isWrongLeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iswrongleader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shardkv.MoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isWrongLeader = 1;
  if (this->iswrongleader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_iswrongleader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shardkv.MoveResponse)
  return target;
}

size_t MoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shardkv.MoveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isWrongLeader = 1;
  if (this->iswrongleader() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shardkv.MoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shardkv.MoveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shardkv.MoveResponse)
    MergeFrom(*source);
  }
}

void MoveResponse::MergeFrom(const MoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shardkv.MoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iswrongleader() != 0) {
    _internal_set_iswrongleader(from._internal_iswrongleader());
  }
}

void MoveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shardkv.MoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveResponse::CopyFrom(const MoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shardkv.MoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveResponse::IsInitialized() const {
  return true;
}

void MoveResponse::InternalSwap(MoveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(iswrongleader_, other->iswrongleader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace shardkv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::shardkv::GroupConfig* Arena::CreateMaybeMessage< ::shardkv::GroupConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::GroupConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shardkv::JoinConfigs* Arena::CreateMaybeMessage< ::shardkv::JoinConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::JoinConfigs >(arena);
}
template<> PROTOBUF_NOINLINE ::shardkv::JoinRequest_GroupsEntry_DoNotUse* Arena::CreateMaybeMessage< ::shardkv::JoinRequest_GroupsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::JoinRequest_GroupsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shardkv::JoinRequest* Arena::CreateMaybeMessage< ::shardkv::JoinRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::JoinRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::shardkv::JoinResponse* Arena::CreateMaybeMessage< ::shardkv::JoinResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::JoinResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::shardkv::QueryRequest* Arena::CreateMaybeMessage< ::shardkv::QueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::QueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::shardkv::QueryResponse_GroupsEntry_DoNotUse* Arena::CreateMaybeMessage< ::shardkv::QueryResponse_GroupsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::QueryResponse_GroupsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shardkv::QueryResponse* Arena::CreateMaybeMessage< ::shardkv::QueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::QueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::shardkv::LeaveRequest* Arena::CreateMaybeMessage< ::shardkv::LeaveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::LeaveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::shardkv::LeaveResponse* Arena::CreateMaybeMessage< ::shardkv::LeaveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::LeaveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::shardkv::MoveRequest* Arena::CreateMaybeMessage< ::shardkv::MoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::MoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::shardkv::MoveResponse* Arena::CreateMaybeMessage< ::shardkv::MoveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shardkv::MoveResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
